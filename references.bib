
@article{Affeldt2008,
  abstract = {Thanks to recent advances, modern proof assistants now enable verification of realistic sequential programs. However, regarding the concurrency paradigm, previous work essentially focused on formalization of abstract systems, such as pure concurrent calculi, which are too minimal to be realistic. In this paper, we propose a library that enables verification of realistic concurrent programs in the Coq proof assistant. Our approach is based on an extension of the {$\pi$}-calculus whose encoding enables such programs to be modeled conveniently. This encoding is coupled with a specification language akin to spatial logics, including in particular a notion of fairness, which is important to write satisfactory specifications for realistic concurrent programs. In order to facilitate formal proof, we propose a collection of lemmas that can be reused in the context of different verifications. Among these lemmas, the most effective for simplifying the proof task take advantage of confluence properties. In order to evaluate feasibility of verification of concurrent programs using this library, we perform verification for a non-trivial application.},
  author = {Affeldt, Reynald and Kobayashi, Naoki},
  doi = {10.1016/j.entcs.2007.11.010},
  file = {/home/uma/references/papers/Affeldt_Kobayashi_2008_A Coq Library for Verification of Concurrent Programs.pdf;/home/uma/.zotero/data/storage/EL75KDDA/S1571066108000765.html},
  issn = {1571-0661},
  journal = {Electronic Notes in Theoretical Computer Science},
  keywords = {concurrent programs,Coq,pi-calculus,Proof assistant},
  month = feb,
  pages = {17-32},
  series = {Proceedings of the {{Fourth International Workshop}} on {{Logical Frameworks}} and {{Meta}}-{{Languages}} ({{LFM}} 2004)},
  title = {A {{Coq Library}} for {{Verification}} of {{Concurrent Programs}}},
  volume = {199},
  year = {2008}
}

@book{Aho1986,
  address = {{Boston, MA, USA}},
  author = {Aho, Alfred V. and Sethi, Ravi and Ullman, Jeffrey D.},
  isbn = {0-201-10088-6},
  publisher = {{Addison-Wesley Longman Publishing Co., Inc.}},
  title = {Compilers: {{Principles}}, {{Techniques}}, and {{Tools}}},
  year = {1986}
}

@article{Allais2018,
  author = {Allais, Guillaume and Atkey, Robert and Chapman, James and McBride, Conor and McKinna, James},
  doi = {10.1145/3236785},
  file = {/home/uma/references/papers/Allais et al_2018_A Type and Scope Safe Universe of Syntaxes with Binding.pdf;/home/uma/references/papers/Allais et al_2018_A Type and Scope Safe Universe of Syntaxes with Binding2.pdf},
  issn = {2475-1421},
  journal = {Proc. ACM Program. Lang.},
  keywords = {Agda,Fusion,Generic Programming,Logical Relations,Semantics,Simulation,Syntax with Binding},
  month = jul,
  number = {ICFP},
  pages = {90:1-90:30},
  title = {A {{Type}} and {{Scope Safe Universe}} of {{Syntaxes}} with {{Binding}}: {{Their Semantics}} and {{Proofs}}},
  volume = {2},
  year = {2018}
}

@article{Backus1960,
  author = {Backus, J. W. and Bauer, F. L. and Green, J. and Katz, C. and McCarthy, J. and Perlis, A. J. and Rutishauser, H. and Samelson, K. and Vauquois, B. and Wegstein, J. H. and {van Wijngaarden}, A. and Woodger, M.},
  doi = {10.1145/367236.367262},
  editor = {Naur, Peter},
  issn = {0001-0782},
  journal = {Commun. ACM},
  month = may,
  number = {5},
  pages = {299-314},
  title = {Report on the {{Algorithmic Language ALGOL}} 60},
  volume = {3},
  year = {1960}
}

@article{Bock2016,
  author = {Bock, Peter Brottveit and Bruni, Alessandro and Murawska, Agata and Sch{\"u}rmann, Carsten},
  journal = {Dale Miller's Festschrift},
  title = {Representing {{Session Types}}},
  year = {2016}
}

@inproceedings{Boutin1997,
  author = {Boutin, Samuel},
  booktitle = {International {{Symposium}} on {{Theoretical Aspects}} of {{Computer Software}}},
  pages = {515-529},
  publisher = {{Springer}},
  title = {Using {{Reflection}} to {{Build Efficient}} and {{Certified Decision Procedures}}},
  year = {1997}
}

@inproceedings{Bove2009,
  author = {Bove, Ana and Dybjer, Peter and Norell, Ulf},
  booktitle = {International {{Conference}} on {{Theorem Proving}} in {{Higher Order Logics}}},
  pages = {73-78},
  publisher = {{Springer}},
  title = {A {{Brief Overview}} of {{Agda}} \textendash{} a {{Functional Language}} with {{Dependent Types}}},
  year = {2009}
}

@inproceedings{Burstall1980,
  author = {Burstall, R. M. and MacQueen, D. B. and Sannella, D. T.},
  booktitle = {Proceedings of the 1980 {{ACM Conference}} on {{LISP}} and {{Functional Programming}}},
  doi = {10.1145/800087.802799},
  pages = {136-143},
  publisher = {{ACM}},
  series = {{{LFP}} '80},
  title = {{{HOPE}}: {{An Experimental Applicative Language}}},
  year = {1980}
}

@incollection{Caires2010,
  address = {{Berlin, Heidelberg}},
  author = {Caires, Lu{\'i}s and Pfenning, Frank},
  booktitle = {{{CONCUR}} 2010 - {{Concurrency Theory}}},
  doi = {10.1007/978-3-642-15375-4_16},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and Gastin, Paul and Laroussinie, Fran{\c c}ois},
  file = {/home/uma/references/papers/Caires_Pfenning_2010_Session Types as Intuitionistic Linear Propositions.pdf},
  isbn = {978-3-642-15374-7 978-3-642-15375-4},
  language = {en},
  pages = {222-236},
  publisher = {{Springer Berlin Heidelberg}},
  title = {Session {{Types}} as {{Intuitionistic Linear Propositions}}},
  volume = {6269},
  year = {2010}
}

@inproceedings{Casinghino2014,
  author = {Casinghino, Chris and Sj{\"o}berg, Vilhelm and Weirich, Stephanie},
  booktitle = {{{ACM SIGPLAN Notices}}},
  pages = {33-45},
  publisher = {{ACM}},
  title = {Combining {{Proofs}} and {{Programs}} in a {{Dependently Typed Language}}},
  volume = {49},
  year = {2014}
}

@techreport{Chaieb2003,
  author = {Chaieb, Amine and Nipkow, Tobias},
  institution = {{Technical report, Technische Universit{\"a}t M{\"u}nchen}},
  title = {Generic {{Proof Synthesis}} for {{Presburger Arithmetic}}},
  year = {2003}
}

@inproceedings{Chlipala2008,
  author = {Chlipala, Adam},
  booktitle = {{{ACM SIGPLAN Notices}}},
  doi = {10.1145/1411204.1411226},
  file = {/home/uma/references/papers/Chlipala_2008_Parametric Higher-Order Abstract Syntax for Mechanized Semantics.pdf},
  month = sep,
  pages = {143-156},
  title = {Parametric {{Higher}}-{{Order Abstract Syntax}} for {{Mechanized Semantics}}},
  volume = {43},
  year = {2008}
}

@article{Cooper1972,
  author = {Cooper, David C},
  journal = {Machine intelligence},
  number = {91-99},
  pages = {300},
  title = {Theorem {{Proving}} in {{Arithmetic}} without {{Multiplication}}},
  volume = {7},
  year = {1972}
}

@article{Coquand1985,
  author = {Coquand, Thierry and Huet, G{\'e}rard},
  doi = {https://doi.org/10.1016/0890-5401(88)90005-3},
  file = {/home/uma/references/papers/Coquand_Huet_1985_The Calculus of Constructions.pdf},
  issn = {0890-5401},
  journal = {Information and Computation},
  number = {2},
  pages = {95-120},
  title = {The {{Calculus}} of {{Constructions}}},
  volume = {76},
  year = {1985}
}

@article{Curry1934,
  author = {Curry, Haskell B},
  journal = {Proceedings of the National Academy of Sciences},
  number = {11},
  pages = {584-590},
  title = {Functionality in {{Combinatory Logic}}},
  volume = {20},
  year = {1934}
}

@incollection{Dardha2016,
  abstract = {In this chapter we introduce the encoding of session types into linear channel types and variant types and of session processes into standard \$\$\textbackslash{}pi \$\${$\pi$}-calculus processes.},
  author = {Dardha, Ornela},
  booktitle = {Type {{Systems}} for {{Distributed Programs}}: {{Components}} and {{Sessions}}},
  doi = {10.2991/978-94-6239-204-5_6},
  file = {/home/uma/references/papers/Dardha_2016_Session Types Revisited.pdf},
  isbn = {978-94-6239-203-8},
  month = jan,
  publisher = {{Springer}},
  title = {Session {{Types Revisited}}},
  year = {2016}
}

@inproceedings{deBruijn1972,
  author = {{de Bruijn}, Nicolaas Govert},
  booktitle = {Indagationes {{Mathematicae}} ({{Proceedings}})},
  pages = {381-392},
  publisher = {{Elsevier}},
  title = {Lambda {{Calculus Notation}} with {{Nameless Dummies}}, a {{Tool}} for {{Automatic Formula Manipulation}}, with {{Application}} to the {{Church}}-{{Rosser Theorem}}},
  volume = {75},
  year = {1972}
}

@book{Despeyroux2000,
  abstract = {We present a formalization of a typed pi-calculus in the Calculus of Inductive Constructions. We give the rules for type-checking and for evaluation and formalize a proof of type preservation in the Coq system. The encoding of the pi-calculus in Coq uses Coq fonctions to represent bindings of variables. This kind of encoding is called a higher-order specication. It provides a concise description of the calculus, leading to simple proofs. The specification we propose for the pi-calculus formalizes communication by means of function application.},
  author = {Despeyroux, Jo{\"e}lle},
  file = {/home/uma/references/papers/Despeyroux_2000_A Higher-Order Specification of the π-Calculus.pdf;/home/uma/.zotero/data/storage/P2ZN3T47/summary.html},
  title = {A {{Higher}}-{{Order Specification}} of the {$\pi$}-{{Calculus}}},
  year = {2000}
}

@inproceedings{Dezani-Ciancaglini2008,
  author = {{Dezani-Ciancaglini}, Mariangiola and {de'Liguoro}, Ugo and Yoshida, Nobuko},
  booktitle = {Trustworthy {{Global Computing}}},
  editor = {Barthe, Gilles and Fournet, C{\'e}dric},
  isbn = {978-3-540-78663-4},
  pages = {257-275},
  publisher = {{Springer Berlin Heidelberg}},
  title = {On {{Progress}} for {{Structured Communications}}},
  year = {2008}
}

@inproceedings{Dezani-ciancaglini2010,
  author = {{Dezani-ciancaglini}, Mariangiola and De'Liguoro, Ugo},
  doi = {10.1007/978-3-642-14458-5_1},
  file = {/home/uma/references/papers/Dezani-ciancaglini_De'Liguoro_2010_Sessions and Session Types.pdf;/home/uma/references/papers/Dezani-ciancaglini_De'Liguoro_2010_Sessions and Session Types2.pdf},
  month = aug,
  pages = {1-28},
  title = {Sessions and {{Session Types}}: {{An Overview}}},
  year = {2010}
}

@phdthesis{Dilmore2019,
  author = {Dilmore, Eric},
  school = {School of Computing Science, University of Glasgow},
  title = {Pi-{{Calculus Session Types}} in {{Coq}}},
  type = {Master's {{Thesis}}},
  year = {2019}
}

@article{Dreyer2018,
  acmid = {3158154},
  articleno = {66},
  author = {Jung, Ralf and Jourdan, Jacques-Henri and Krebbers, Robbert and Dreyer, Derek},
  doi = {10.1145/3158154},
  file = {/home/uma/references/papers/Jung et al_2017_RustBelt.pdf},
  issn = {2475-1421},
  issue_date = {January 2018},
  journal = {Proc. ACM Program. Lang.},
  keywords = {concurrency,logical relations,Rust,separation logic,type systems},
  location = {New York, NY, USA},
  month = dec,
  number = {POPL},
  numpages = {34},
  pages = {66:1-66:34},
  publisher = {{ACM}},
  title = {{{RustBelt}}: {{Securing}} the {{Foundations}} of the {{Rust Programming Language}}},
  volume = {2},
  year = {2017}
}

@article{Dybjer1994,
  abstract = {A general formulation of inductive and recursive definitions in Martin-L{\"o}f's type theory is presented. It extends Backhouse's `Do-It-Yourself Type Theory' to include inductive definitions of families of sets and definitions of functions by recursion on the way elements of such sets are generated. The formulation is in natural deduction and is intended to be a natural generalisation to type theory of Martin-L{\"o}f's theory of iterated inductive definitions in predicate logic.
Formal criteria are given for correct formation and introduction rules of a new set former capturing definition by strictly positive, iterated, generalised induction. Moreover, there is an inversion principle for deriving elimination and equality rules from the formation and introduction rules. Finally, there is an alternative schematic presentation of definition by recursion.
The resulting theory is a flexible and powerful language for programming and constructive mathematics. We hint at the wealth of possible applications by showing several basic examples: predicate logic, generalised induction, and a formalisation of the untyped lambda calculus.},
  author = {Dybjer, Peter},
  doi = {10.1007/BF01211308},
  file = {/home/uma/references/papers/Dybjer_1994_Inductive families.pdf},
  journal = {Formal Aspects of Computing},
  month = jan,
  pages = {440-465},
  title = {Inductive Families},
  volume = {6},
  year = {1994}
}

@techreport{Fischer1974,
  author = {Fischer, Michael J and Rabin, Michael O},
  institution = {{Massachusetts Inst of Tech Cambridge Project MAC}},
  title = {Super-{{Exponential Complexity}} of {{Presburger Arithmetic}}.},
  year = {1974}
}

@inproceedings{Gay2001,
  abstract = {We present a formalisation, in the theorem proving system Isabelle/HOL, of a linear type system for the pi calculus, including a proof of runtime safety of typed processes. The use of a uniform encoding of pi calculus syntax in a meta language, the development of a general theory of type environments, and the structured formalisation of the main proofs, facilitate the adaptation of the Isabelle theories and proof scripts to variations on the language and other type systems.},
  author = {Gay, Simon J.},
  booktitle = {Theorem {{Proving}} in {{Higher Order Logics}}},
  editor = {Boulton, Richard J. and Jackson, Paul B.},
  file = {/home/uma/references/papers/Gay_2001_A Framework for the Formalisation of Pi Calculus Type Systems in Isabelle-HOL.pdf},
  isbn = {978-3-540-44755-9},
  keywords = {automatic theorem proving,pi calculus,semantics,Types},
  language = {en},
  pages = {217-232},
  publisher = {{Springer Berlin Heidelberg}},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  title = {A {{Framework}} for the {{Formalisation}} of {{Pi Calculus Type Systems}} in {{Isabelle}}/{{HOL}}},
  year = {2001}
}

@article{Gay2005,
  abstract = {Extending the pi calculus with the session types proposed by Honda et al. allows high-level specifications of structured patterns of communication, such as client-server protocols, to be expressed as types and verified by static typechecking. We define a notion of subtyping for session types, which allows protocol specifications to be extended in order to describe richer behaviour; for example, an implemented server can be refined without invalidating type-correctness of an overall system. We formalize the syntax, operational semantics and typing rules of an extended pi calculus, prove that typability guarantees absence of run-time communication errors, and show that the typing rules can be transformed into a practical typechecking algorithm.},
  author = {Gay, Simon and Hole, Malcolm},
  doi = {10.1007/s00236-005-0177-z},
  issn = {1432-0525},
  journal = {Acta Informatica},
  month = nov,
  number = {2},
  pages = {191-225},
  title = {Subtyping for {{Session Types}} in the {{Pi Calculus}}},
  volume = {42},
  year = {2005}
}

@article{Gay2008,
  author = {Gay, Simon},
  doi = {10.1017/S0960129508006944},
  file = {/home/uma/references/papers/Gay_2008_Bounded Polymorphism in Session Types.pdf},
  journal = {Mathematical Structures in Computer Science},
  month = oct,
  pages = {895-930},
  title = {Bounded {{Polymorphism}} in {{Session Types}}},
  volume = {18},
  year = {2008}
}

@book{Girard1989,
  address = {{New York, NY, USA}},
  author = {Girard, Jean-Yves and Taylor, Paul and Lafont, Yves},
  file = {/home/uma/references/papers/Girard et al_1989_Proofs and Types.pdf},
  isbn = {0-521-37181-3},
  publisher = {{Cambridge University Press}},
  title = {Proofs and {{Types}}},
  year = {1989}
}

@inproceedings{Giunti2010,
  abstract = {We present a reconstruction of session types in a conventional pi calculus where types are qualified as linear or unrestricted. Linearly typed communication channels are guaranteed to occur in exactly one thread, possibly multiple times. We equip types with a constructor that denotes the two ends of a same communication channel. In order to assess the flexibility of the new type system, we provide three distinct encodings (from the linear lambda calculus, from the linear pi calculus, and from the pi calculus with polarized variables) into our system. For each language we present operational and typing correspondences, showing that our system effectively subsumes the linear pi calculus as well as foregoing works on session types.},
  author = {Giunti, Marco and Vasconcelos, Vasco T.},
  booktitle = {{{CONCUR}} 2010 - {{Concurrency Theory}}},
  editor = {Gastin, Paul and Laroussinie, Fran{\c c}ois},
  isbn = {978-3-642-15375-4},
  pages = {432-446},
  publisher = {{Springer Berlin Heidelberg}},
  title = {A {{Linear Account}} of {{Session Types}} in the {{Pi Calculus}}},
  year = {2010}
}

@inproceedings{Gregoire2005,
  author = {Gr{\'e}goire, Benjamin and Mahboubi, Assia},
  booktitle = {International {{Conference}} on {{Theorem Proving}} in {{Higher Order Logics}}},
  pages = {98-113},
  publisher = {{Springer}},
  title = {Proving {{Equalities}} in a {{Commutative Ring Done Right}} in {{Coq}}},
  year = {2005}
}

@incollection{Griffith2013,
  abstract = {The Pi Calculus is a popular formalism for modeling distributed computation. Session Types extend the Pi Calculus with a static, inferable type system. Dependent Types allow for a more precise characterization of the behavior of programs, but in their full generality are not inferable. In this paper, we present LiquidPi an approach that combines the dependent type inferencing of Liquid Types with Honda's Session Types to give a more precise automatically derived description of the behavior of distributed programs. These types can be used to describe/enforce safety properties of distributed systems. We present a type system parametric over an underlying functional language with Pi Calculus connectives and give an inference algorithm for it by means of efficient external solvers and a set of dependent qualifier templates.},
  address = {{Berlin, Heidelberg}},
  author = {Griffith, Dennis and Gunter, Elsa L.},
  booktitle = {{{NASA Formal Methods}}},
  doi = {10.1007/978-3-642-38088-4_13},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and Brat, Guillaume and Rungta, Neha and Venet, Arnaud},
  file = {/home/uma/references/papers/Griffith_Gunter_2013_LiquidPi.pdf},
  isbn = {978-3-642-38087-7 978-3-642-38088-4},
  language = {en},
  pages = {185-197},
  publisher = {{Springer Berlin Heidelberg}},
  shorttitle = {{{LiquidPi}}},
  title = {{{LiquidPi}}: {{Inferrable Dependent Session Types}}},
  volume = {7871},
  year = {2013}
}

@book{Henry-Gerard1999,
  abstract = {This paper presents a method for coding pi-calculus in the COQ proof assistant, in order to use this environment to formalize properties of the pi-calculus. This method consists in making a syntactic discrimination between free names (then called parameters) and bound names (then called variables) of the processes, so that implicit renamings of bound names are avoided in the substitution operation. This technique has been used by J.McKinna and R.Pollack in an extensive study of PTS [5]. We use this coding here to prove subject reduction property for a type system of a monadic pi-calculus.},
  author = {{Henry-G{\'e}rard}, Lo{\"i}c and Meije, Projet},
  file = {/home/uma/references/papers/Henry-Gérard_Meije_1999_Proof of the subject reduction property for a π-calculus in COQ.pdf;/home/uma/.zotero/data/storage/FVFRE453/summary.html},
  title = {Proof of the Subject Reduction Property for a {$\pi$}-Calculus in {{COQ}}},
  year = {1999}
}

@inproceedings{Honda2008,
  author = {Honda, Kohei and Yoshida, Nobuko and Carbone, Marco},
  booktitle = {Proceedings of the 35th {{Annual ACM SIGPLAN}}-{{SIGACT Symposium}} on {{Principles}} of {{Programming Languages}}},
  doi = {10.1145/1328438.1328472},
  file = {/home/uma/references/papers/Honda et al_2008_Multiparty Asynchronous Session Types.pdf},
  isbn = {978-1-59593-689-9},
  keywords = {causality,choreography,communications,mobile processes,multiparty,session types,structured programming},
  pages = {273-284},
  publisher = {{ACM}},
  series = {{{POPL}} '08},
  title = {Multiparty {{Asynchronous Session Types}}},
  year = {2008}
}

@article{Honsell2001,
  abstract = {We present a large and we think also significant case study in computer assisted formal reasoning. We start by giving a higher-order abstract syntax encoding of {$\pi$}-calculus in the higher-order inductive/coinductive-type theories CIC and CC(Co)Ind. This encoding gives rise to a full-fledged proof editor/proof assistant for the {$\pi$}-calculus, once we embed it in Coq, an interactive proof-development environment for CC(Co)Ind. Using this computerized assistant we prove formally a substantial chapter of the theory of strong late bisimilarity, which amounts essentially to Section 2 of A calculus of mobile processes by Milner, Parrow, and Walker. This task is greatly simplified by the use of higher-order syntax. In fact, not only we can delegate conveniently to the metalanguage {$\alpha$}-conversion and substitution, but, introducing a suitable axiomatization of the theory of contexts, we can accommodate also the machinery for generating new names. The axiomatization we introduce is quite general and should be easily portable to other formalizations based on higher-order syntax. The use of coinductive types and corresponding tactics allows to give alternative, and possibly more natural, proofs of many properties of strong late bisimilarity, w.r.t. those originally given by Milner, Parrow, and Walker.},
  author = {Honsell, Furio and Miculan, Marino and Scagnetto, Ivan},
  doi = {10.1016/S0304-3975(00)00095-5},
  file = {/home/uma/references/papers/Honsell et al_2001_π-calculus in (Co)inductive-type theory.pdf;/home/uma/.zotero/data/storage/KLRGFM2S/S0304397500000955.html},
  issn = {0304-3975},
  journal = {Theoretical Computer Science},
  keywords = {-calculus,Higher-order abstract syntax,Logical frameworks,Proof checking,Typed -calculus},
  month = feb,
  number = {2},
  pages = {239-285},
  series = {{{IC}}-{{EATCS}}'97},
  title = {{$\pi$}-Calculus in ({{Co}})Inductive-Type Theory},
  volume = {253},
  year = {2001}
}

@book{Howard1980,
  author = {Howard, William A},
  publisher = {{Academic Press}},
  title = {The {{Formulae}}-as-{{Types Notion}} of {{Construction}}. {{Hindley}}, {{JR}}, \& {{Seldin}}, {{JP}} ({{Eds}}), {{To HB Curry}}: {{Essays}} on {{Combinatory Logic}}, {{Lambda Calculus}} and {{Formalism}}},
  year = {1980}
}

@book{Janicic1997,
  author = {Jani{\v c}i{\'c}, Predrag and Green, Ian and Bundy, Alan},
  publisher = {{University of Edinburgh, Department of Artificial Intelligence}},
  title = {A {{Comparison}} of {{Decision Procedures}} in {{Presburger Arithmetic}}},
  year = {1997}
}

@article{Jensen,
  abstract = {This thesis investigates one possible way of proving functional correctness of distributed programs by integrating Session Types and Separation Logic. We introduce a language that has Session Type style typing judgements inside its Hoare triples and Separation Logic predicates inside its Session Type protocols. The language \textendash{} which builds on an existing Java-like language built by Bengtson et al. [3] \textendash{} is implemented in Coq, which has also been used to prove properties and theorems of the language semantics. The extended language has the new send, recv and start primitives with which programs with multiple processes that communicate using message-passing governed by Session Type protocols can be constructed. Using Separation Logic predicates instead of types to describe the transferred data, receivers are allowed to assume properties proven by the sending party.},
  author = {Jensen, Morten Fangel},
  file = {/home/uma/references/papers/Jensen_Formal Veriﬁcation of Distributed Programs using Session Types and Coq.pdf},
  language = {en},
  pages = {74},
  title = {Formal {{Verification}} of {{Distributed Programs}} Using {{Session Types}} and {{Coq}}}
}

@article{Jia,
  abstract = {Session types provide a means to prescribe the communication behavior between concurrent message-passing processes. However, in a distributed setting, some processes may be written in languages that do not support static typing of sessions or may be compromised by a malicious intruder, violating invariants of the session types. In such a setting, dynamically monitoring communication between processes becomes a necessity for identifying undesirable actions. In this paper, we show how to dynamically monitor communication to enforce adherence to session types in a higher-order setting. We present a system of blame assignment in the case when the monitor detects an undesirable action and an alarm is raised. We prove that dynamic monitoring does not change system behavior for welltyped processes, and that one of an indicated set of possible culprits must have been compromised in case of an alarm.},
  author = {Jia, Limin and Gommerstadt, Hannah and Pfenning, Frank},
  file = {/home/uma/references/papers/Jia et al_Monitors and Blame Assignment for Higher-Order Session Types.pdf},
  language = {en},
  pages = {42},
  title = {Monitors and {{Blame Assignment}} for {{Higher}}-{{Order Session Types}}}
}

@book{Kobayashi1996,
  abstract = {The economy and flexibility of the pi-calculus make it attractive both as an object of theoretical study and as a basis for concurrent language design and implementation. However, such generality has a cost: encoding higher-level features like functional computation in pi-calculus throws away potentially useful information. We show how a linear type system can be used to recover important static information about a process's behaviour. In particular, we can guarantee that two processes communicating over a linear channel cannot interfere with other communicating processes. This enables more aggressive optimisation of communications over linear channels and allows useful refinements to the usual notions of process equivalence for pi-calculus. After},
  author = {Kobayashi, Naoki and Pierce, Benjamin C. and Turner, David N.},
  file = {/home/uma/references/papers/Kobayashi et al_1996_Linearity and the Pi-Calculus.pdf;/home/uma/.zotero/data/storage/7QEAP97G/summary.html},
  title = {Linearity and the {{Pi}}-{{Calculus}}},
  year = {1996}
}

@article{Kobayashi2002,
  author = {Kobayashi, Naoki},
  doi = {10.1006/inco.2002.3171},
  journal = {Information and Computation},
  month = sep,
  pages = {122-159},
  title = {A {{Type System}} for {{Lock}}-{{Free Processes}}},
  volume = {177},
  year = {2002}
}

@inproceedings{Kokke2015,
  author = {Kokke, Wen and Swierstra, Wouter},
  booktitle = {International {{Conference}} on {{Mathematics}} of {{Program Construction}}},
  pages = {276-301},
  publisher = {{Springer}},
  title = {Auto in {{Agda}}},
  year = {2015}
}

@article{Krishnaswami2015,
  author = {R. Krishnaswami, Neelakantan and Pradic, Pierre and Benton, Nick},
  doi = {10.1145/2676726.2676969},
  journal = {Conference Record of the Annual ACM Symposium on Principles of Programming Languages},
  month = jan,
  pages = {17-30},
  title = {Integrating {{Dependent}} and {{Linear Types}}},
  volume = {2015},
  year = {2015}
}

@inproceedings{Lindley2016,
  abstract = {We present a novel embedding of session-typed concurrency in Haskell. We extend an existing HOAS embedding of linear {$\lambda$}-calculus with a set of core session-typed primitives, using indexed type families to express the constraints of the session typing discipline. We give two interpretations of our embedding, one in terms of GHC's built-in concurrency and another in terms of purely functional continuations. Our safety guarantees, including deadlock freedom, are assured statically and introduce no additional runtime overhead.},
  address = {{New York, NY, USA}},
  author = {Lindley, Sam and Morris, J. Garrett},
  booktitle = {Proceedings of the 9th {{International Symposium}} on {{Haskell}}},
  doi = {10.1145/2976002.2976018},
  file = {/home/uma/references/papers/Lindley_Morris_2016_Embedding Session Types in Haskell.pdf},
  isbn = {978-1-4503-4434-0},
  keywords = {check,embedded languages,linear types,session types},
  pages = {133--145},
  publisher = {{ACM}},
  series = {Haskell 2016},
  title = {Embedding {{Session Types}} in {{Haskell}}},
  year = {2016}
}

@article{Martin2000,
  author = {Martin, Robert Cecil},
  journal = {Object Mentor},
  number = {34},
  pages = {597},
  title = {Design {{Principles}} and {{Design Patterns}}},
  volume = {1},
  year = {2000}
}

@article{McBride2000,
  author = {McBride, Conor},
  title = {Dependently {{Typed Functional Programs}} and {{Their Proofs}}},
  year = {2000}
}

@article{McBride2004,
  author = {McBride, Conor and McKinna, James},
  journal = {Journal of functional programming},
  number = {1},
  pages = {69-111},
  title = {The {{View}} from the {{Left}}},
  volume = {14},
  year = {2004}
}

@incollection{McBride2016,
  abstract = {Work to date on combining linear types and dependent types has deliberately and successfully avoided doing so. Entirely fit for their own purposes, such systems wisely insist that types depend only on the replicable sublanguage, thus sidestepping the issue of counting uses of limited-use data either within types or in ways which are only really needed to shut the typechecker up. As a result, the linear implication (`lollipop') stubbornly remains a non-dependent \$\$S \textbackslash{}backslashmultimap T\$\$S{$\multimap$}T. This paper defines and establishes the basic metatheory of a type theory supporting a `dependent lollipop' \$\$(x\textbackslash{}backslash!:\textbackslash{}backslash!S)\textbackslash{}backslashmultimap T[x]\$\$(x:S){$\multimap$}T[x], where what the input used to be is in some way commemorated by the type of the output. For example, we might convert list to length-indexed vectors in place by a function with type \$\$(l\textbackslash{}backslash!:\textbackslash{}backslash!\textbackslash{}backslashmathsf \{List\}\textbackslash{}backslash,X)\textbackslash{}backslashmultimap \textbackslash{}backslashmathsf \{Vector\}\textbackslash{}backslash,X\textbackslash{}backslash,(\textbackslash{}backslashmathsf \{length\}\textbackslash{}backslash,l)\$\$(l:ListX){$\multimap$}VectorX(lengthl). Usage is tracked with resource annotations belonging to an arbitrary rig, or `riNg without Negation'. The key insight is to use the rig's zero to mark information in contexts which is present for purposes of contemplation rather than consumption, like a meal we remember fondly but cannot eat twice. We need no runtime copies of l to form the above vector type. We can have plenty of nothing with no additional runtime resource, and nothing is plenty for the construction of dependent types.},
  address = {{Cham}},
  author = {McBride, Conor},
  booktitle = {A {{List}} of {{Successes That Can Change}} the {{World}}: {{Essays Dedicated}} to {{Philip Wadler}} on the {{Occasion}} of {{His}} 60th {{Birthday}}},
  doi = {10.1007/978-3-319-30936-1_12},
  editor = {Lindley, Sam and McBride, Conor and Trinder, Phil and Sannella, Don},
  file = {/home/uma/references/papers/McBride_2016_I Got Plenty o' Nuttin'.pdf},
  isbn = {978-3-319-30936-1},
  pages = {207-233},
  publisher = {{Springer International Publishing}},
  title = {I {{Got Plenty}} o' {{Nuttin}}'},
  year = {2016}
}

@article{Morris2016,
  author = {Morris, J. Garrett and Morris, J. Garrett},
  doi = {10.1145/2951913.2951925},
  file = {/home/uma/references/papers/Morris_Morris_2016_The best of both worlds.pdf},
  issn = {0362-1340},
  journal = {ACM SIGPLAN Notices},
  month = apr,
  number = {9},
  pages = {448-461},
  shorttitle = {The Best of Both Worlds},
  title = {The Best of Both Worlds: Linear Functional Programming without Compromise},
  volume = {51},
  year = {2016}
}

@inproceedings{Mostrous2007,
  abstract = {Abstract. This paper proposes two typing systems for session interactions in higherorder mobile processes. Session types for the HO{$\pi$}-calculus capture high-level structures of communication protocols and code mobility as type abstraction, and can be used to statically check the safe and consistent process composition in communication-centric distributed software. Integration of arbitrary higher-order code mobility and sessions leads to technical difficulties in type soundness, because linear usage of session channels and completion of sessions are required in executed code. By using techniques from the linear {$\lambda$}-calculus, we develop a coherent and tractable session typing system for the HO{$\pi$}-calculus. We also present an alternative system based on fine-grained process types. The formal comparison between the two systems offers insight on the interplay between higher-order code mobility and session types. 1},
  author = {Mostrous, Dimitris and Yoshida, Nobuko},
  booktitle = {In {{TLCA}}'07, {{LNCS}}},
  file = {/home/uma/references/papers/Mostrous_Yoshida_2007_Two session typing systems for higher-order mobile processes.pdf;/home/uma/.zotero/data/storage/6M5A559Q/summary.html},
  pages = {321--335},
  publisher = {{Springer-Verlag}},
  title = {Two Session Typing Systems for Higher-Order Mobile Processes},
  year = {2007}
}

@inproceedings{Mostrous2009,
  author = {Mostrous, Dimitris and Yoshida, Nobuko and Honda, Kohei},
  doi = {10.1007/978-3-642-00590-9_23},
  file = {/home/uma/references/papers/Mostrous et al_2009_Global Principal Typing in Partially Commutative Asynchronous Sessions.pdf},
  month = aug,
  pages = {316-332},
  title = {Global {{Principal Typing}} in {{Partially Commutative Asynchronous Sessions}}},
  year = {2009}
}

@inproceedings{NeilD.Jones2004,
  booktitle = {Proceedings of the 31st {{ACM SIGPLAN}}-{{SIGACT Symposium}} on {{Principles}} of {{Programming Languages}}, {{POPL}} 2004, {{Venice}}, {{Italy}}, {{January}} 14-16, 2004},
  doi = {10.1145/964001.964011},
  editor = {{Neil D. Jones} and Leroy, Xavier},
  pages = {111-122},
  publisher = {{ACM}},
  title = {Parsing {{Expression Grammars}}: {{A Recognition}}-{{Based Syntactic Foundation}}},
  year = {2004}
}

@inproceedings{Norell2009,
  author = {Norell, Ulf and Chapman, James},
  booktitle = {Advanced {{Functional Programming}}. {{LNCS}} 5832},
  pages = {230-266},
  publisher = {{Springer}},
  title = {Dependently {{Typed Programming}} in {{Agda}}},
  year = {2009}
}

@inproceedings{Norrish2003,
  author = {Norrish, Michael},
  booktitle = {International {{Conference}} on {{Theorem Proving}} in {{Higher Order Logics}}},
  pages = {71-86},
  publisher = {{Springer}},
  title = {Complete {{Integer Decision Procedures}} as {{Derived Rules}} in {{HOL}}},
  year = {2003}
}

@book{Norrish2006,
  author = {Norrish, Michael},
  title = {Deciding {{Presburger Arithmetic}}},
  year = {2006}
}

@article{Oury2008,
  author = {Oury, Nicolas and Swierstra, Wouter},
  journal = {ACM Sigplan Notices},
  number = {9},
  pages = {39-50},
  title = {The {{Power}} of {{Pi}}},
  volume = {43},
  year = {2008}
}

@article{Paykin2017,
  author = {Paykin, Jennifer and Zdancewic, S},
  doi = {10.1145/3156695.3122965},
  file = {/home/uma/references/papers/Paykin_Zdancewic_2017_The Linearity Monad.pdf},
  journal = {ACM SIGPLAN Notices},
  month = sep,
  pages = {117-132},
  title = {The {{Linearity Monad}}},
  volume = {52},
  year = {2017}
}

@book{Pierce2002,
  author = {Pierce, Benjamin C.},
  isbn = {978-0-262-16209-8},
  publisher = {{MIT Press}},
  title = {Types and {{Programming Languages}}},
  year = {2002}
}

@article{Power2000,
  author = {Power, James and Webster, Caroline},
  file = {/home/uma/references/papers/Power_Webster_2000_Working with Linear Logic in Coq.pdf},
  month = jul,
  title = {Working with {{Linear Logic}} in {{Coq}}},
  year = {2000}
}

@inproceedings{Presburger1929,
  author = {Presburger, Mojzesz},
  booktitle = {Comptes-{{Rendus Du Ler Congres Des Mathematiciens Des Pays Slavs}}},
  title = {Uber {{Die Vollstandigkeiteines Gewissen Systems Der Arithmetik Ganzer Zahlen}}, in {{Welchen Die Addition Als Einzige Operation Hervortritt}}},
  year = {1929}
}

@inproceedings{Pugh1991,
  author = {Pugh, William},
  booktitle = {Proceedings of the 1991 {{ACM}}/{{IEEE Conference}} on {{Supercomputing}}},
  pages = {4-13},
  publisher = {{ACM}},
  title = {The {{Omega Test}}: {{A Fast}} and {{Practical Integer Programming Algorithm}} for {{Dependence Analysis}}},
  year = {1991}
}

@book{Russinoff2017,
  author = {Russinoff, David M},
  title = {Polynomial {{Terms}} and {{Sparse Horner Normal Form}}},
  year = {2017}
}

@inproceedings{Sadrzadeh2003,
  author = {Sadrzadeh, Mehrnoosh},
  booktitle = {In {{Emerging Trends TPHOLS}} '03},
  file = {/home/uma/references/papers/Sadrzadeh_2003_Modal Linear Logic in Higher Order Logic.pdf},
  keywords = {rank3},
  pages = {75-93},
  title = {Modal {{Linear Logic}} in {{Higher Order Logic}}: {{An Experiment}} with {{Coq}}},
  year = {2003}
}

@inproceedings{Schack-Nielsen2008,
  __markedentry = {[uma:]},
  abstract = {CLF (Concurrent LF) [CPWW02a] is a logical framework for specifying and implementing deductive and concurrent systems from areas, such as programming language theory, security protocol analysis, process algebras, and logics. Celf is an implementation of the CLF type theory that extends the LF type theory by linear types to support representation of state and a monad to support representation of concurrency. It relies on the judgments-as-types methodology for specification and the interpretation of CLF signatures as concurrent logic programs [LPPW05] for experimentation. Celf is written in Standard ML and compiles with MLton, MLKit, and SML/NJ. The source code and a collection of examples are available from http://www.twelf.org/\textasciitilde{}celf.},
  author = {{Schack-Nielsen}, Anders and Sch{\"u}rmann, Carsten},
  booktitle = {Automated {{Reasoning}}},
  editor = {Armando, Alessandro and Baumgartner, Peter and Dowek, Gilles},
  isbn = {978-3-540-71070-7},
  pages = {320-326},
  publisher = {{Springer Berlin Heidelberg}},
  title = {Celf -- {{A Logical Framework}} for {{Deductive}} and {{Concurrent Systems}} ({{System Description}})},
  year = {2008}
}

@incollection{Sestoft2017,
  abstract = {This chapter introduces the approach taken and the plan followed in this book. We show how to represent arithmetic expressions and other program fragments as data structures in F\# as well as Java, and how to compute with such program fragments. We also introduce various basic concepts of programming languages.},
  address = {{Cham}},
  author = {Sestoft, Peter},
  booktitle = {Programming {{Language Concepts}}},
  doi = {10.1007/978-3-319-60789-4},
  isbn = {978-3-319-60789-4},
  pages = {1-12},
  publisher = {{Springer International Publishing}},
  title = {Programming {{Language Concepts}}},
  year = {2017}
}

@book{Sorensen2006,
  author = {S{\o}rensen, Morten Heine and Urzyczyn, Pawe\textbackslash{}l},
  publisher = {{Elsevier Science Limited}},
  title = {Lectures on the {{Curry}}-{{Howard Isomorphism}} ({{Studies}} in {{Logic}} and the {{Foundations}} of {{Mathematics}}, 0049-{{237X}}; v. 149)},
  year = {2006}
}

@techreport{Stansifer1984,
  author = {Stansifer, Ryan},
  institution = {{Cornell University}},
  title = {Presburger's {{Article}} on {{Integer Arithmetic}}: {{Remarks}} and {{Translation}}},
  year = {1984}
}

@inproceedings{Steele1994,
  author = {Steele, Guy L. and {Jr.}},
  booktitle = {In 21st {{Annual ACM Symposium}} on {{Principles}} of {{Programming Languages}} ({{POPL}}'94},
  pages = {472-492},
  publisher = {{ACM Press}},
  title = {Building {{Interpreters}} by {{Composing Monads}}},
  year = {1994}
}

@inproceedings{Takeuchi1994,
  abstract = {We present a small language \$\$\textbackslash{}backslashmathcal\{L\}\$\$and its typing system, starting from the idea of interaction, one of the important notions in parallel and distributed computing. \$\$\textbackslash{}backslashmathcal\{L\}\$\$is based on, apart from such constructs as parallel composition and process creation, three pairs of communication primitives which use the notion of a session, a semantically atomic chain of communication actions which can interleave with other such chains freely, for high-level abstraction of interactionbased computing. The three primitives enable programmers to elegantly describe complex interactions among processes with a rigorous type discipline similar to ML [4]. The language is given formal operational semantics and a type inference system, regarding which we prove that if a program is well-typed in the typing system, it never causes run-time error due to type inconsistent communication patterns, offering a new foundation for type discipline in parallel programming languages.},
  author = {Takeuchi, Kaku and Honda, Kohei and Kubo, Makoto},
  booktitle = {{{PARLE}}'94 {{Parallel Architectures}} and {{Languages Europe}}},
  editor = {Halatsis, Costas and Maritsas, Dimitrios and Philokyprou, George and Theodoridis, Sergios},
  isbn = {978-3-540-48477-6},
  pages = {398-413},
  publisher = {{Springer Berlin Heidelberg}},
  title = {An {{Interaction}}-{{Based Language}} and {{Its Typing System}}},
  year = {1994}
}

@article{Thiemann,
  abstract = {Session types describe structured communication on heterogeneously typed channels at a high level. Their tail-recursive structure imposes a protocol that can be described by a regular language. The types of transmitted values are drawn from the underlying functional language, abstracting from the details of serializing values of structured data types.},
  author = {Thiemann, Peter and Vasconcelos, Vasco T},
  file = {/home/uma/references/papers/Thiemann_Vasconcelos_Context-Free Session Types.pdf},
  language = {en},
  pages = {14},
  title = {Context-{{Free Session Types}}}
}

@inproceedings{Thiemann2014,
  abstract = {Session types enable fine-grained static control over communication protocols. Gradual typing is a means to safely integrate statically and dynamically typed program fragments.
We propose a calculus for synchronous functional two-party session types, augment this calculus with a dynamically typed fragment as well as coercion operations between statically and dynamically typed parts, and establish its basic metatheory: type preservation and progress. A technical novelty is the notion of coercions for the choice operator in session types which is related to coercions of sum types.},
  author = {Thiemann, Peter},
  doi = {10.1007/978-3-662-45917-1_10},
  file = {/home/uma/references/papers/Thiemann_2014_Session Types with Gradual Typing.pdf},
  month = sep,
  pages = {144-158},
  title = {Session {{Types}} with {{Gradual Typing}}},
  volume = {8902},
  year = {2014}
}

@inproceedings{Thiemann2017,
  abstract = {We propose an extension of binary session types with interleaved sessions that work similar to interrupts. The participants in a session register a set of trigger predicates that are associated with local protocols. When a trigger fires, all participants switch simultaneously to the interleaved protocol and return to the original protocol afterwards. The use of interleaved sessions enables the elegant specification of protocols that are otherwise cumbersome to specify.},
  author = {Thiemann, Peter},
  doi = {10.1145/3019612.3019804},
  month = apr,
  pages = {1312-1318},
  title = {Interleaving Sessions with Predicates},
  year = {2017}
}

@inproceedings{Toninho2011,
  author = {Toninho, Bernardo and Caires, Lu{\'i}s and Pfenning, Frank},
  booktitle = {Proceedings of the 13th {{International ACM SIGPLAN Symposium}} on {{Principles}} and {{Practices}} of {{Declarative Programming}}},
  doi = {10.1145/2003476.2003499},
  isbn = {978-1-4503-0776-5},
  keywords = {process calculus,type theory},
  pages = {161-172},
  publisher = {{ACM}},
  series = {{{PPDP}} '11},
  title = {Dependent {{Session Types}} via {{Intuitionistic Linear Type Theory}}},
  year = {2011}
}

@inproceedings{vanderWalt2012,
  author = {{van der Walt}, Paul and Swierstra, Wouter},
  booktitle = {Symposium on {{Implementation}} and {{Application}} of {{Functional Languages}}},
  pages = {157-173},
  publisher = {{Springer}},
  title = {Engineering {{Proof}} by {{Reflection}} in {{Agda}}},
  year = {2012}
}

@phdthesis{vanderWalt2012a,
  author = {{van der Walt}, PD},
  title = {Reflection in {{Agda}}},
  type = {Master's {{Thesis}}},
  year = {2012}
}

@incollection{Vasconcelos2009,
  author = {Vasconcelos, Vasco},
  booktitle = {Information and {{Computation}}},
  doi = {10.1007/978-3-642-01918-0_4},
  file = {/home/uma/references/papers/Vasconcelos_2009_Fundamentals of Session Types.pdf},
  month = may,
  pages = {158-186},
  title = {Fundamentals of {{Session Types}}},
  volume = {217},
  year = {2009}
}

@article{Voinea,
  abstract = {Multiparty Session Types (MPST) are a type formalism used to model communication protocols among components in distributed systems, by specifying type and direction of data transmitted. It is standard for multiparty session type systems to use access control based on linear or affine types. While useful in offering strong guarantees of communication safety and session fidelity, linearity and affinity run into the well-known problem of inflexible programming, excluding scenarios that make use of shared channels or need to store channels into shared data structures.},
  author = {Voinea, A Laura and Dardha, Ornela and Gay, Simon J},
  file = {/home/uma/references/papers/Voinea et al_Resource Sharing via Capability-Based Multiparty Session Types.pdf},
  language = {en},
  pages = {26},
  title = {Resource {{Sharing}} via {{Capability}}-{{Based Multiparty Session Types}}}
}

@book{Wadler1989,
  abstract = {From the type of a polymorphic function we can derive a theorem that it satisfies. Every function of the same type satisfies the same theorem. This provides a free source of useful theorems, courtesy of Reynolds\&\#039; abstraction theorem for the polymorphic lambda calculus.},
  author = {Wadler, Philip},
  title = {Theorems for {{Free}}!},
  year = {1989}
}

@article{Wadler2003,
  author = {Wadler, Philip},
  doi = {10.1007/3-540-57182-5_12},
  file = {/home/uma/references/papers/Wadler_2003_A Taste of Linear Logic.pdf},
  month = nov,
  title = {A {{Taste}} of {{Linear Logic}}},
  year = {2003}
}

@article{Wadler2014,
  author = {Wadler, Philip},
  doi = {10.1017/S095679681400001X},
  file = {/home/uma/references/papers/Wadler_2014_Propositions as Sessions.pdf;/home/uma/references/papers/Wadler_2014_Propositions as Sessions2.pdf},
  journal = {Journal of Functional Programming},
  number = {2-3},
  pages = {384-418},
  title = {Propositions as {{Sessions}}},
  volume = {24},
  year = {2014}
}

@book{Walker1989,
  author = {Walker, David and Milner, Robin and Parrow, Joachim},
  file = {/home/uma/references/papers/Walker et al_1989_A Calculus of Mobile Processes (Parts I and II).pdf},
  month = jun,
  title = {A {{Calculus}} of {{Mobile Processes}} ({{Parts I}} and {{II}})},
  volume = {100},
  year = {1989}
}

@unpublished{Wing2002,
  author = {Wing, Jeannette M.},
  file = {/home/uma/references/papers/Wing_2002_FAQ on Pi-Calculus.pdf},
  month = dec,
  title = {{{FAQ}} on {{Pi}}-{{Calculus}}},
  year = {2002}
}

@article{Xi2016,
  abstract = {We present a formalization of session types in a multi-threaded lambda-calculus (MTLC) equipped with a linear type system, establishing for the MTLC both type preservation and global progress. The latter (global progress) implies that the evaluation of a well-typed program in the MTLC can never reach a deadlock. As this formulated MTLC can be readily embedded into ATS, a full-fledged language with a functional programming core that supports both dependent types (of DML-style) and linear types, we obtain a direct implementation of session types in ATS. In addition, we gain immediate support for a form of dependent session types based on this embedding into ATS. Compared to various existing formalizations of session types, we see the one given in this paper is unique in its closeness to concrete implementation. In particular, we report such an implementation ready for practical use that generates Erlang code from well-typed ATS source (making use of session types), thus taking great advantage of the infrastructural support for distributed computing in Erlang.},
  archivePrefix = {arXiv},
  author = {Xi, Hongwei and Ren, Zhiqiang and Wu, Hanwen and Blair, William},
  eprint = {1603.03727},
  eprinttype = {arxiv},
  file = {/home/uma/references/papers/Xi et al_2016_Session Types in a Linearly Typed Multi-Threaded Lambda-Calculus.pdf},
  journal = {arXiv:1603.03727 [cs]},
  keywords = {Computer Science - Logic in Computer Science,Computer Science - Programming Languages},
  language = {en},
  month = mar,
  primaryClass = {cs},
  title = {Session {{Types}} in a {{Linearly Typed Multi}}-{{Threaded Lambda}}-{{Calculus}}},
  year = {2016}
}

@article{Xi2017,
  author = {Xi, Hongwei},
  month = mar,
  title = {Applied {{Type System}}: {{An Approach}} to {{Practical Programming}} with {{Theorem}}-{{Proving}}},
  year = {2017}
}

@inproceedings{Yang2006,
  abstract = {In this paper we present an automatic verification technique for pa- rameterized systems where the subsystem behavior is modeled using the - calculus. At its core, our technique treats each process instance in a system as a property transformer. Given a property ' that we want to verify of an N -process system, we use a partial model checker to infer the property '0 (stated as a for- mula in a sufficiently rich logic) that must hold of an (N 1)-process system. If the sequence of formulas ','0,... thus constructed converges, and the limit is satisfied by the deadlocked process, we can conclude that the N -process system satisfies '. To this end, we develop a partial model checker for the -calculus that uses an expressive value-passing logic as the property language. We also develop a number of optimizations to make the model checker efficient enough for routine use, and a light-weight widening operator to accelerate convergence. We demon- strate the effectiveness of our technique by using it to verify properties of a wide variety of parameterized systems that are beyond the reach of existing techniques.},
  author = {Yang, Ping and Basu, Samik and R. Ramakrishnan, C},
  doi = {10.1007/11691372_3},
  file = {/home/uma/references/papers/Yang et al_2006_Parameterized Verification of π-Calculus Systems.pdf},
  month = mar,
  pages = {42-57},
  title = {Parameterized {{Verification}} of {$\pi$}-{{Calculus Systems}}},
  year = {2006}
}

@phdthesis{Zalakain2018,
  abstract = {The Curry-Howard correspondence draws a direct link between logic and computation: propositions are modelled as types and proofs as programs; to prove a proposition is to construct a program inhabiting its corresponding type. Several computer-assisted theorem provers have been developed under this idea. They are not just used to verify human reasoning: they are also often capable of generating proofs automatically.

This project considers the development of such automated theorem provers in Agda, a dependently typed programming language. As a warm-up, I present a verified solver for equations on monoids. Then, I comment on the solver for commutative rings included in Agda's standard library. Finally, I develop a verified decision procedure for Presburger arithmetic \textemdash{} a decidable first-order predicate logic.},
  address = {{Glasgow}},
  author = {Zalakain, Uma},
  copyright = {Creative Commons Attribution-NoDerivatives 4.0 International License (CC-BY-ND)},
  file = {/home/uma/references/papers/Zalakain_2018_Evidence-providing problem solvers in Agda.pdf},
  language = {English},
  school = {University of Strathclyde},
  title = {Evidence-Providing Problem Solvers in {{Agda}}},
  type = {Dissertation},
  year = {2018}
}


