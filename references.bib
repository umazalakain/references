
@book{Aho1986,
  address = {{Boston, MA, USA}},
  author = {Aho, Alfred V. and Sethi, Ravi and Ullman, Jeffrey D.},
  isbn = {0-201-10088-6},
  publisher = {{Addison-Wesley Longman Publishing Co., Inc.}},
  title = {Compilers: {{Principles}}, {{Techniques}}, and {{Tools}}},
  year = {1986}
}

@article{Allais2018,
  author = {Allais, Guillaume and Atkey, Robert and Chapman, James and McBride, Conor and McKinna, James},
  doi = {10.1145/3236785},
  file = {/home/uma/references/papers/a-type-and-scope-safe-universe-of-syntaxes-with-binding-their-semantics-and-proofs.pdf},
  issn = {2475-1421},
  journal = {Proc. ACM Program. Lang.},
  keywords = {Agda,Fusion,Generic Programming,Logical Relations,Semantics,Simulation,Syntax with Binding},
  month = jul,
  number = {ICFP},
  pages = {90:1--90:30},
  title = {A {{Type}} and {{Scope Safe Universe}} of {{Syntaxes}} with {{Binding}}: {{Their Semantics}} and {{Proofs}}},
  volume = {2},
  year = {2018}
}

@article{Allais2018,
  acmid = {3236785},
  articleno = {90},
  author = {Allais, Guillaume and Atkey, Robert and Chapman, James and McBride, Conor and McKinna, James},
  doi = {10.1145/3236785},
  issn = {2475-1421},
  issue_date = {September 2018},
  journal = {Proc. ACM Program. Lang.},
  keywords = {Agda,Fusion,Generic Programming,Logical Relations,Semantics,Simulation,Syntax with Binding},
  location = {New York, NY, USA},
  month = jul,
  number = {ICFP},
  numpages = {30},
  pages = {90:1-90:30},
  publisher = {{ACM}},
  title = {A {{Type}} and {{Scope Safe Universe}} of {{Syntaxes}} with {{Binding}}: {{Their Semantics}} and {{Proofs}}},
  volume = {2},
  year = {2018}
}

@article{Backus1960,
  author = {Backus, J. W. and Bauer, F. L. and Green, J. and Katz, C. and McCarthy, J. and Perlis, A. J. and Rutishauser, H. and Samelson, K. and Vauquois, B. and Wegstein, J. H. and {van Wijngaarden}, A. and Woodger, M.},
  doi = {10.1145/367236.367262},
  editor = {Naur, Peter},
  issn = {0001-0782},
  journal = {Commun. ACM},
  month = may,
  number = {5},
  pages = {299--314},
  title = {Report on the {{Algorithmic Language ALGOL}} 60},
  volume = {3},
  year = {1960}
}

@article{Bock2016,
  author = {Bock, Peter Brottveit and Bruni, Alessandro and Murawska, Agata and Sch{\"u}rmann, Carsten},
  journal = {Dale Miller's Festschrift},
  title = {Representing {{Session Types}}},
  year = {2016}
}

@article{Bock2016,
  author = {Bock, Peter Brottveit and Bruni, Alessandro and Murawska, Agata and Sch{\"u}rmann, Carsten},
  journal = {Dale Miller's Festschrift},
  title = {Representing {{Session Types}}},
  year = {2016}
}

@inproceedings{Boutin1997,
  author = {Boutin, Samuel},
  booktitle = {International {{Symposium}} on {{Theoretical Aspects}} of {{Computer Software}}},
  pages = {515--529},
  publisher = {{Springer}},
  title = {Using Reflection to Build Efficient and Certified Decision Procedures},
  year = {1997}
}

@inproceedings{Bove2009,
  author = {Bove, Ana and Dybjer, Peter and Norell, Ulf},
  booktitle = {International {{Conference}} on {{Theorem Proving}} in {{Higher Order Logics}}},
  pages = {73--78},
  publisher = {{Springer}},
  title = {A Brief Overview of {{Agda}} \textendash{} a Functional Language with Dependent Types},
  year = {2009}
}

@inproceedings{Burstall1980,
  address = {{New York, NY, USA}},
  author = {Burstall, R. M. and MacQueen, D. B. and Sannella, D. T.},
  booktitle = {Proceedings of the 1980 {{ACM Conference}} on {{LISP}} and {{Functional Programming}}},
  doi = {10.1145/800087.802799},
  pages = {136--143},
  publisher = {{ACM}},
  series = {{{LFP}} '80},
  title = {{{HOPE}}: {{An Experimental Applicative Language}}},
  year = {1980}
}

@inproceedings{Caires2010,
  abstract = {Several type disciplines for {$\pi$}-calculi have been proposed in which linearity plays a key role, even if their precise relationship with pure linear logic is still not well understood. In this paper, we introduce a type system for the {$\pi$}-calculus that exactly corresponds to the standard sequent calculus proof system for dual intuitionistic linear logic. Our type system is based on a new interpretation of linear propositions as session types, and provides the first purely logical account of all (both shared and linear) features of session types. We show that our type discipline is useful from a programming perspective, and ensures session fidelity, absence of deadlocks, and a tight operational correspondence between {$\pi$}-calculus reductions and cut elimination steps.},
  address = {{Berlin, Heidelberg}},
  author = {Caires, Lu{\'i}s and Pfenning, Frank},
  booktitle = {{{CONCUR}} 2010 - {{Concurrency Theory}}},
  editor = {Gastin, Paul and Laroussinie, Fran{\c c}ois},
  isbn = {978-3-642-15375-4},
  pages = {222--236},
  publisher = {{Springer Berlin Heidelberg}},
  title = {Session {{Types}} as {{Intuitionistic Linear Propositions}}},
  year = {2010}
}

@inproceedings{Caires2010,
  __markedentry = {[uma:]},
  abstract = {Several type disciplines for {$\pi$}-calculi have been proposed in which linearity plays a key role, even if their precise relationship with pure linear logic is still not well understood. In this paper, we introduce a type system for the {$\pi$}-calculus that exactly corresponds to the standard sequent calculus proof system for dual intuitionistic linear logic. Our type system is based on a new interpretation of linear propositions as session types, and provides the first purely logical account of all (both shared and linear) features of session types. We show that our type discipline is useful from a programming perspective, and ensures session fidelity, absence of deadlocks, and a tight operational correspondence between {$\pi$}-calculus reductions and cut elimination steps.},
  author = {Caires, Lu{\'i}s and Pfenning, Frank},
  booktitle = {{{CONCUR}} 2010 - {{Concurrency Theory}}},
  editor = {Gastin, Paul and Laroussinie, Fran{\c c}ois},
  isbn = {978-3-642-15375-4},
  pages = {222-236},
  publisher = {{Springer Berlin Heidelberg}},
  title = {Session {{Types}} as {{Intuitionistic Linear Propositions}}},
  year = {2010}
}

@inproceedings{Casinghino2014,
  author = {Casinghino, Chris and Sj{\"o}berg, Vilhelm and Weirich, Stephanie},
  booktitle = {{{ACM SIGPLAN Notices}}},
  pages = {33--45},
  publisher = {{ACM}},
  title = {Combining Proofs and Programs in a Dependently Typed Language},
  volume = {49},
  year = {2014}
}

@techreport{Chaieb2003,
  author = {Chaieb, Amine and Nipkow, Tobias},
  institution = {{Technical report, Technische Universit{\"a}t M{\"u}nchen}},
  title = {Generic Proof Synthesis for {{Presburger}} Arithmetic},
  year = {2003}
}

@inproceedings{Chlipala2008,
  author = {Chlipala, Adam},
  booktitle = {{{ACM SIGPLAN Notices}}},
  doi = {10.1145/1411204.1411226},
  file = {/home/uma/references/papers/parametric-higher-order-abstract-syntax-for-mechanized-semantics.pdf},
  month = sep,
  pages = {143-156},
  title = {Parametric {{Higher}}-{{Order Abstract Syntax}} for {{Mechanized Semantics}}},
  volume = {43},
  year = {2008}
}

@inproceedings{Chlipala2008,
  author = {Chlipala, Adam},
  doi = {10.1145/1411204.1411226},
  month = sep,
  pages = {143-156},
  series = {{{ACM SIGPLAN Notices}}},
  title = {Parametric {{Higher}}-{{Order Abstract Syntax}} for {{Mechanized Semantics}}},
  volume = {43},
  year = {2008}
}

@article{Cooper1972,
  author = {Cooper, David C},
  journal = {Machine intelligence},
  number = {91-99},
  pages = {300},
  title = {Theorem Proving in Arithmetic without Multiplication},
  volume = {7},
  year = {1972}
}

@article{Coquand1988,
  author = {Coquand, Thierry and Huet, G{\'e}rard},
  doi = {https://doi.org/10.1016/0890-5401(88)90005-3},
  file = {/home/uma/references/papers/the-calculus-of-constructions.pdf},
  issn = {0890-5401},
  journal = {Information and Computation},
  number = {2},
  pages = {95 - 120},
  title = {The Calculus of Constructions},
  volume = {76},
  year = {1988}
}

@article{Coquand1988,
  __markedentry = {[uma:6]},
  author = {Coquand, Thierry and Huet, G{\'e}rard},
  doi = {https://doi.org/10.1016/0890-5401(88)90005-3},
  issn = {0890-5401},
  journal = {Information and Computation},
  number = {2},
  pages = {95-120},
  title = {The Calculus of Constructions},
  volume = {76},
  year = {1988}
}

@article{Curry1934,
  author = {Curry, Haskell B},
  journal = {Proceedings of the National Academy of Sciences},
  number = {11},
  pages = {584--590},
  title = {Functionality in Combinatory Logic},
  volume = {20},
  year = {1934}
}

@incollection{Dardha2016,
  abstract = {In this chapter we introduce the encoding of session types into linear channel types and variant types and of session processes into standard \$\$\textbackslash{}pi \$\${$\pi$}-calculus processes.},
  author = {Dardha, Ornela},
  booktitle = {Type {{Systems}} for {{Distributed Programs}}: {{Components}} and {{Sessions}}},
  doi = {10.2991/978-94-6239-204-5_6},
  file = {/home/uma/references/papers/session-types-revisited.pdf},
  isbn = {978-94-6239-203-8},
  month = jan,
  publisher = {{Springer}},
  title = {Session {{Types Revisited}}},
  year = {2016}
}

@incollection{Dardha2016m,
  abstract = {In this chapter we introduce the encoding of session types into linear channel types and variant types and of session processes into standard {$\pi\pi$}-calculus processes.},
  author = {Dardha, Ornela},
  booktitle = {Type {{Systems}} for {{Distributed Programs}}: {{Components}} and {{Sessions}}},
  doi = {10.2991/978-94-6239-204-5_6},
  isbn = {978-94-6239-203-8},
  month = jan,
  publisher = {{Springer}},
  title = {Session {{Types Revisited}}},
  year = {2016}
}

@inproceedings{deBruijn1972,
  author = {{de Bruijn}, Nicolaas Govert},
  booktitle = {Indagationes {{Mathematicae}} ({{Proceedings}})},
  pages = {381--392},
  publisher = {{Elsevier}},
  title = {Lambda Calculus Notation with Nameless Dummies, a Tool for Automatic Formula Manipulation, with Application to the {{Church}}-{{Rosser}} Theorem},
  volume = {75},
  year = {1972}
}

@inproceedings{Dezani-Ciancaglini2008,
  address = {{Berlin, Heidelberg}},
  author = {{Dezani-Ciancaglini}, Mariangiola and {de'Liguoro}, Ugo and Yoshida, Nobuko},
  booktitle = {Trustworthy {{Global Computing}}},
  editor = {Barthe, Gilles and Fournet, C{\'e}dric},
  isbn = {978-3-540-78663-4},
  pages = {257--275},
  publisher = {{Springer Berlin Heidelberg}},
  title = {On {{Progress}} for {{Structured Communications}}},
  year = {2008}
}

@inproceedings{Dezani-ciancaglini2010,
  author = {{Dezani-ciancaglini}, Mariangiola and De'Liguoro, Ugo},
  doi = {10.1007/978-3-642-14458-5_1},
  file = {/home/uma/references/papers/sessions-and-session-types-an-overview.pdf},
  month = aug,
  pages = {1-28},
  title = {Sessions and {{Session Types}}: {{An Overview}}},
  year = {2010}
}

@inproceedings{Dezani-ciancaglini2010,
  author = {{Dezani-ciancaglini}, Mariangiola and De'Liguoro, Ugo},
  doi = {10.1007/978-3-642-14458-5_1},
  month = aug,
  pages = {1-28},
  title = {Sessions and {{Session Types}}: {{An Overview}}},
  year = {2010}
}

@phdthesis{Dilmore2019,
  author = {Dilmore, Eric},
  school = {School of Computing Science, University of Glasgow},
  title = {Pi-{{Calculus Session Types}} in {{Coq}}},
  type = {Master's {{Thesis}}},
  year = {2019}
}

@article{Dreyer2018,
  acmid = {3158154},
  articleno = {66},
  author = {Jung, Ralf and Jourdan, Jacques-Henri and Krebbers, Robbert and Dreyer, Derek},
  doi = {10.1145/3158154},
  issn = {2475-1421},
  issue_date = {January 2018},
  journal = {Proc. ACM Program. Lang.},
  keywords = {concurrency,logical relations,Rust,separation logic,type systems},
  location = {New York, NY, USA},
  month = dec,
  number = {POPL},
  numpages = {34},
  pages = {66:1-66:34},
  publisher = {{ACM}},
  title = {{{RustBelt}}: {{Securing}} the {{Foundations}} of the {{Rust Programming Language}}},
  volume = {2},
  year = {2017}
}

@article{Dybjer1994,
  author = {Dybjer, Peter},
  doi = {10.1007/BF01211308},
  journal = {Formal Aspects of Computing},
  month = jan,
  pages = {440-465},
  title = {Inductive Families},
  volume = {6},
  year = {1994}
}

@article{Dybjer1994,
  author = {Dybjer, Peter},
  doi = {10.1007/BF01211308},
  journal = {Formal Aspects of Computing},
  month = jan,
  pages = {440-465},
  title = {Inductive Families},
  volume = {6},
  year = {1994}
}

@techreport{Fischer1974,
  author = {Fischer, Michael J and Rabin, Michael O},
  institution = {{Massachusetts Inst of Tech Cambridge Project MAC}},
  title = {Super-{{Exponential Complexity}} of {{Presburger Arithmetic}}.},
  year = {1974}
}

@article{Gay2005,
  abstract = {Extending the pi calculus with the session types proposed by Honda et al. allows high-level specifications of structured patterns of communication, such as client-server protocols, to be expressed as types and verified by static typechecking. We define a notion of subtyping for session types, which allows protocol specifications to be extended in order to describe richer behaviour; for example, an implemented server can be refined without invalidating type-correctness of an overall system. We formalize the syntax, operational semantics and typing rules of an extended pi calculus, prove that typability guarantees absence of run-time communication errors, and show that the typing rules can be transformed into a practical typechecking algorithm.},
  author = {Gay, Simon and Hole, Malcolm},
  doi = {10.1007/s00236-005-0177-z},
  issn = {1432-0525},
  journal = {Acta Informatica},
  month = nov,
  number = {2},
  pages = {191--225},
  title = {Subtyping for Session Types in the Pi Calculus},
  volume = {42},
  year = {2005}
}

@article{Gay2005,
  __markedentry = {[uma:6]},
  abstract = {Extending the pi calculus with the session types proposed by Honda et al. allows high-level specifications of structured patterns of communication, such as client-server protocols, to be expressed as types and verified by static typechecking. We define a notion of subtyping for session types, which allows protocol specifications to be extended in order to describe richer behaviour; for example, an implemented server can be refined without invalidating type-correctness of an overall system. We formalize the syntax, operational semantics and typing rules of an extended pi calculus, prove that typability guarantees absence of run-time communication errors, and show that the typing rules can be transformed into a practical typechecking algorithm.},
  author = {Gay, Simon and Hole, Malcolm},
  day = {01},
  doi = {10.1007/s00236-005-0177-z},
  issn = {1432-0525},
  journal = {Acta Informatica},
  month = nov,
  number = {2},
  pages = {191-225},
  title = {Subtyping for Session Types in the Pi Calculus},
  volume = {42},
  year = {2005}
}

@article{Gay2008,
  author = {Gay, Simon},
  doi = {10.1017/S0960129508006944},
  journal = {Mathematical Structures in Computer Science},
  month = oct,
  pages = {895-930},
  title = {Bounded Polymorphism in Session Types},
  volume = {18},
  year = {2008}
}

@article{Gay2008,
  author = {Gay, Simon},
  doi = {10.1017/S0960129508006944},
  journal = {Mathematical Structures in Computer Science},
  month = oct,
  pages = {895-930},
  title = {Bounded Polymorphism in Session Types},
  volume = {18},
  year = {2008}
}

@book{Girard1989,
  address = {{New York, NY, USA}},
  author = {Girard, Jean-Yves and Taylor, Paul and Lafont, Yves},
  file = {/home/uma/references/papers/proofs-and-types.pdf},
  isbn = {0-521-37181-3},
  publisher = {{Cambridge University Press}},
  title = {Proofs and {{Types}}},
  year = {1989}
}

@inproceedings{Giunti2010,
  abstract = {We present a reconstruction of session types in a conventional pi calculus where types are qualified as linear or unrestricted. Linearly typed communication channels are guaranteed to occur in exactly one thread, possibly multiple times. We equip types with a constructor that denotes the two ends of a same communication channel. In order to assess the flexibility of the new type system, we provide three distinct encodings (from the linear lambda calculus, from the linear pi calculus, and from the pi calculus with polarized variables) into our system. For each language we present operational and typing correspondences, showing that our system effectively subsumes the linear pi calculus as well as foregoing works on session types.},
  address = {{Berlin, Heidelberg}},
  author = {Giunti, Marco and Vasconcelos, Vasco T.},
  booktitle = {{{CONCUR}} 2010 - {{Concurrency Theory}}},
  editor = {Gastin, Paul and Laroussinie, Fran{\c c}ois},
  isbn = {978-3-642-15375-4},
  pages = {432--446},
  publisher = {{Springer Berlin Heidelberg}},
  title = {A {{Linear Account}} of {{Session Types}} in the {{Pi Calculus}}},
  year = {2010}
}

@inproceedings{Gregoire2005,
  author = {Gr{\'e}goire, Benjamin and Mahboubi, Assia},
  booktitle = {International {{Conference}} on {{Theorem Proving}} in {{Higher Order Logics}}},
  pages = {98--113},
  publisher = {{Springer}},
  title = {Proving Equalities in a Commutative Ring Done Right in {{Coq}}},
  year = {2005}
}

@inproceedings{Honda2008,
  address = {{New York, NY, USA}},
  author = {Honda, Kohei and Yoshida, Nobuko and Carbone, Marco},
  booktitle = {Proceedings of the 35th {{Annual ACM SIGPLAN}}-{{SIGACT Symposium}} on {{Principles}} of {{Programming Languages}}},
  doi = {10.1145/1328438.1328472},
  file = {/home/uma/references/papers/multiparty-asynchronous-session-types.pdf},
  isbn = {978-1-59593-689-9},
  keywords = {causality,choreography,communications,mobile processes,multiparty,session types,structured programming},
  pages = {273--284},
  publisher = {{ACM}},
  series = {{{POPL}} '08},
  title = {Multiparty {{Asynchronous Session Types}}},
  year = {2008}
}

@book{Howard1980,
  author = {Howard, William A},
  publisher = {{Academic Press}},
  title = {The Formulae-as-Types Notion of Construction. {{Hindley}}, {{JR}}, \& {{Seldin}}, {{JP}} (Eds), {{To HB Curry}}: {{Essays}} on Combinatory Logic, Lambda Calculus and Formalism},
  year = {1980}
}

@book{Janicic1997,
  author = {Jani{\v c}i{\'c}, Predrag and Green, Ian and Bundy, Alan},
  publisher = {{University of Edinburgh, Department of Artificial Intelligence}},
  title = {A Comparison of Decision Procedures in {{Presburger}} Arithmetic},
  year = {1997}
}

@article{Jung2017,
  author = {Jung, Ralf and Jourdan, Jacques-Henri and Krebbers, Robbert and Dreyer, Derek},
  doi = {10.1145/3158154},
  issn = {2475-1421},
  journal = {Proc. ACM Program. Lang.},
  keywords = {concurrency,logical relations,Rust,separation logic,type systems},
  month = dec,
  number = {POPL},
  pages = {66:1--66:34},
  title = {{{RustBelt}}: {{Securing}} the {{Foundations}} of the {{Rust Programming Language}}},
  volume = {2},
  year = {2017}
}

@article{Kobayashi1999,
  author = {Kobayashi, Naoki and Pierce, Benjamin and N. Turner, David},
  doi = {10.1145/330249.330251},
  journal = {ACM Transactions on Programming Languages and Systems (TOPLAS)},
  month = dec,
  pages = {914-947},
  title = {Linearity and the {{Pi}}-{{Calculus}}},
  volume = {21},
  year = {1999}
}

@article{Kobayashi1999,
  author = {Kobayashi, Naoki and Pierce, Benjamin and N. Turner, David},
  doi = {10.1145/330249.330251},
  journal = {ACM Transactions on Programming Languages and Systems (TOPLAS)},
  month = dec,
  pages = {914-947},
  title = {Linearity and the {{Pi}}-{{Calculus}}},
  volume = {21},
  year = {1999}
}

@article{Kobayashi2002,
  author = {Kobayashi, Naoki},
  doi = {10.1006/inco.2002.3171},
  journal = {Information and Computation},
  month = sep,
  pages = {122-159},
  title = {A {{Type System}} for {{Lock}}-{{Free Processes}}},
  volume = {177},
  year = {2002}
}

@article{Kobayashi2002,
  author = {Kobayashi, Naoki},
  doi = {10.1006/inco.2002.3171},
  journal = {Information and Computation},
  month = sep,
  pages = {122-159},
  title = {A {{Type System}} for {{Lock}}-{{Free Processes}}},
  volume = {177},
  year = {2002}
}

@inproceedings{Kokke2015,
  author = {Kokke, Wen and Swierstra, Wouter},
  booktitle = {International {{Conference}} on {{Mathematics}} of {{Program Construction}}},
  pages = {276--301},
  publisher = {{Springer}},
  title = {Auto in {{Agda}}},
  year = {2015}
}

@article{Krishnaswami2015,
  author = {R. Krishnaswami, Neelakantan and Pradic, Pierre and Benton, Nick},
  doi = {10.1145/2676726.2676969},
  journal = {Conference Record of the Annual ACM Symposium on Principles of Programming Languages},
  month = jan,
  pages = {17-30},
  title = {Integrating Dependent and Linear Types},
  volume = {2015},
  year = {2015}
}

@article{Martin2000,
  author = {Martin, Robert Cecil},
  journal = {Object Mentor},
  number = {34},
  pages = {597},
  title = {Design {{Principles}} and {{Design Patterns}}},
  volume = {1},
  year = {2000}
}

@article{McBride2000,
  author = {McBride, Conor},
  title = {Dependently Typed Functional Programs and Their Proofs},
  year = {2000}
}

@article{McBride2004,
  author = {McBride, Conor and McKinna, James},
  journal = {Journal of functional programming},
  number = {1},
  pages = {69--111},
  title = {The View from the Left},
  volume = {14},
  year = {2004}
}

@article{McBride2004,
  author = {McBride, Conor and McKinna, James},
  journal = {Journal of functional programming},
  number = {1},
  pages = {69-111},
  publisher = {{Cambridge University Press}},
  title = {The View from the Left},
  volume = {14},
  year = {2004}
}

@incollection{McBride2016,
  abstract = {Work to date on combining linear types and dependent types has deliberately and successfully avoided doing so. Entirely fit for their own purposes, such systems wisely insist that types depend only on the replicable sublanguage, thus sidestepping the issue of counting uses of limited-use data either within types or in ways which are only really needed to shut the typechecker up. As a result, the linear implication (`lollipop') stubbornly remains a non-dependent \$\$S \textbackslash{}backslashmultimap T\$\$S{$\multimap$}T. This paper defines and establishes the basic metatheory of a type theory supporting a `dependent lollipop' \$\$(x\textbackslash{}backslash!:\textbackslash{}backslash!S)\textbackslash{}backslashmultimap T[x]\$\$(x:S){$\multimap$}T[x], where what the input used to be is in some way commemorated by the type of the output. For example, we might convert list to length-indexed vectors in place by a function with type \$\$(l\textbackslash{}backslash!:\textbackslash{}backslash!\textbackslash{}backslashmathsf \{List\}\textbackslash{}backslash,X)\textbackslash{}backslashmultimap \textbackslash{}backslashmathsf \{Vector\}\textbackslash{}backslash,X\textbackslash{}backslash,(\textbackslash{}backslashmathsf \{length\}\textbackslash{}backslash,l)\$\$(l:ListX){$\multimap$}VectorX(lengthl). Usage is tracked with resource annotations belonging to an arbitrary rig, or `riNg without Negation'. The key insight is to use the rig's zero to mark information in contexts which is present for purposes of contemplation rather than consumption, like a meal we remember fondly but cannot eat twice. We need no runtime copies of l to form the above vector type. We can have plenty of nothing with no additional runtime resource, and nothing is plenty for the construction of dependent types.},
  address = {{Cham}},
  author = {McBride, Conor},
  booktitle = {A {{List}} of {{Successes That Can Change}} the {{World}}: {{Essays Dedicated}} to {{Philip Wadler}} on the {{Occasion}} of {{His}} 60th {{Birthday}}},
  doi = {10.1007/978-3-319-30936-1_12},
  editor = {Lindley, Sam and McBride, Conor and Trinder, Phil and Sannella, Don},
  file = {/home/uma/references/papers/i-got-plenty-o-nuttin.pdf},
  isbn = {978-3-319-30936-1},
  pages = {207--233},
  publisher = {{Springer International Publishing}},
  title = {I {{Got Plenty}} o' {{Nuttin}}'},
  year = {2016}
}

@incollection{McBride2016,
  __markedentry = {[uma:]},
  abstract = {Work to date on combining linear types and dependent types has deliberately and successfully avoided doing so. Entirely fit for their own purposes, such systems wisely insist that types depend only on the replicable sublanguage, thus sidestepping the issue of counting uses of limited-use data either within types or in ways which are only really needed to shut the typechecker up. As a result, the linear implication (`lollipop') stubbornly remains a non-dependent \$\$S \textbackslash{}multimap T\$\$S{$\multimap$}T. This paper defines and establishes the basic metatheory of a type theory supporting a `dependent lollipop' \$\$(x\textbackslash{}!:\textbackslash{}!S)\textbackslash{}multimap T[x]\$\$(x:S){$\multimap$}T[x], where what the input used to be is in some way commemorated by the type of the output. For example, we might convert list to length-indexed vectors in place by a function with type \$\$(l\textbackslash{}!:\textbackslash{}!\textbackslash{}mathsf \{List\}\textbackslash,X)\textbackslash{}multimap \textbackslash{}mathsf \{Vector\}\textbackslash,X\textbackslash,(\textbackslash{}mathsf \{length\}\textbackslash,l)\$\$(l:ListX){$\multimap$}VectorX(lengthl). Usage is tracked with resource annotations belonging to an arbitrary rig, or `riNg without Negation'. The key insight is to use the rig's zero to mark information in contexts which is present for purposes of contemplation rather than consumption, like a meal we remember fondly but cannot eat twice. We need no runtime copies of l to form the above vector type. We can have plenty of nothing with no additional runtime resource, and nothing is plenty for the construction of dependent types.},
  address = {{Cham}},
  author = {McBride, Conor},
  booktitle = {A {{List}} of {{Successes That Can Change}} the {{World}}: {{Essays Dedicated}} to {{Philip Wadler}} on the {{Occasion}} of {{His}} 60th {{Birthday}}},
  doi = {10.1007/978-3-319-30936-1_12},
  editor = {Lindley, Sam and McBride, Conor and Trinder, Phil and Sannella, Don},
  isbn = {978-3-319-30936-1},
  pages = {207-233},
  publisher = {{Springer International Publishing}},
  title = {I {{Got Plenty}} o' {{Nuttin}}'},
  year = {2016}
}

@inproceedings{Mostrous2009,
  author = {Mostrous, Dimitris and Yoshida, Nobuko and Honda, Kohei},
  doi = {10.1007/978-3-642-00590-9_23},
  month = aug,
  pages = {316-332},
  title = {Global {{Principal Typing}} in {{Partially Commutative Asynchronous Sessions}}},
  year = {2009}
}

@inproceedings{Mostrous2009,
  author = {Mostrous, Dimitris and Yoshida, Nobuko and Honda, Kohei},
  doi = {10.1007/978-3-642-00590-9_23},
  month = aug,
  pages = {316-332},
  title = {Global {{Principal Typing}} in {{Partially Commutative Asynchronous Sessions}}},
  year = {2009}
}

@inproceedings{NeilD.Jones2004,
  booktitle = {Proceedings of the 31st {{ACM SIGPLAN}}-{{SIGACT Symposium}} on {{Principles}} of {{Programming Languages}}, {{POPL}} 2004, {{Venice}}, {{Italy}}, {{January}} 14-16, 2004},
  doi = {10.1145/964001.964011},
  editor = {{Neil D. Jones} and Leroy, Xavier},
  pages = {111--122},
  publisher = {{ACM}},
  title = {Parsing Expression Grammars: A Recognition-Based Syntactic Foundation},
  year = {2004}
}

@inproceedings{Norell2009,
  author = {Norell, Ulf and Chapman, James},
  booktitle = {Advanced {{Functional Programming}}. {{LNCS}} 5832},
  pages = {230--266},
  publisher = {{Springer}},
  title = {Dependently {{Typed Programming}} in {{Agda}}},
  year = {2009}
}

@inproceedings{Norrish2003,
  author = {Norrish, Michael},
  booktitle = {International {{Conference}} on {{Theorem Proving}} in {{Higher Order Logics}}},
  pages = {71--86},
  publisher = {{Springer}},
  title = {Complete Integer Decision Procedures as Derived Rules in {{HOL}}},
  year = {2003}
}

@book{Norrish2006,
  author = {Norrish, Michael},
  title = {Deciding {{Presburger Arithmetic}}},
  year = {2006}
}

@article{Oury2008,
  author = {Oury, Nicolas and Swierstra, Wouter},
  journal = {ACM Sigplan Notices},
  number = {9},
  pages = {39--50},
  title = {The Power of {{Pi}}},
  volume = {43},
  year = {2008}
}

@article{Paykin2017,
  author = {Paykin, Jennifer and Zdancewic, S},
  doi = {10.1145/3156695.3122965},
  file = {/home/uma/references/papers/the-linearity-monad.pdf},
  journal = {ACM SIGPLAN Notices},
  month = sep,
  pages = {117-132},
  title = {The Linearity {{Monad}}},
  volume = {52},
  year = {2017}
}

@article{Paykin2017,
  author = {Paykin, Jennifer and Zdancewic, S},
  doi = {10.1145/3156695.3122965},
  journal = {ACM SIGPLAN Notices},
  month = sep,
  pages = {117-132},
  title = {The Linearity {{Monad}}},
  volume = {52},
  year = {2017}
}

@book{Pierce2002,
  author = {Pierce, Benjamin C.},
  isbn = {978-0-262-16209-8},
  publisher = {{MIT Press}},
  title = {Types and Programming Languages},
  year = {2002}
}

@article{Power2000,
  author = {Power, James and Webster, Caroline},
  file = {/home/uma/references/papers/working-with-linear-logic-in-coq.pdf},
  month = jul,
  title = {Working with {{Linear Logic}} in {{Coq}}},
  year = {2000}
}

@article{Power2000,
  author = {Power, James and Webster, Caroline},
  month = jul,
  title = {Working with {{Linear Logic}} in {{Coq}}},
  year = {2000}
}

@inproceedings{Presburger1929,
  author = {Presburger, Mojzesz},
  booktitle = {Comptes-{{Rendus}} Du Ler {{Congres}} Des {{Mathematiciens}} Des {{Pays Slavs}}},
  title = {Uber Die {{Vollstandigkeiteines}} Gewissen {{Systems}} Der {{Arithmetik}} Ganzer {{Zahlen}}, in Welchen Die {{Addition}} Als Einzige {{Operation}} Hervortritt},
  year = {1929}
}

@inproceedings{Pugh1991,
  author = {Pugh, William},
  booktitle = {Proceedings of the 1991 {{ACM}}/{{IEEE}} Conference on {{Supercomputing}}},
  pages = {4--13},
  publisher = {{ACM}},
  title = {The {{Omega}} Test: A Fast and Practical Integer Programming Algorithm for Dependence Analysis},
  year = {1991}
}

@article{R.Krishnaswami2015,
  author = {R. Krishnaswami, Neelakantan and Pradic, Pierre and Benton, Nick},
  doi = {10.1145/2676726.2676969},
  journal = {Conference Record of the Annual ACM Symposium on Principles of Programming Languages},
  month = jan,
  pages = {17-30},
  title = {Integrating Dependent and Linear Types},
  volume = {2015},
  year = {2015}
}

@book{Russinoff2017,
  author = {Russinoff, David M},
  title = {Polynomial {{Terms}} and {{Sparse Horner Normal Form}}},
  year = {2017}
}

@inproceedings{Sadrzadeh2003,
  author = {Sadrzadeh, Mehrnoosh},
  booktitle = {In {{Emerging Trends TPHOLS}} '03},
  file = {/home/uma/references/papers/modal-linear-logic-in-higher-order-logic.pdf},
  keywords = {rank3},
  pages = {75--93},
  title = {Modal Linear Logic in Higher Order Logic: {{An}} Experiment with {{Coq}}},
  year = {2003}
}

@inproceedings{Schack-Nielsen2008,
  abstract = {CLF (Concurrent LF) [CPWW02a] is a logical framework for specifying and implementing deductive and concurrent systems from areas, such as programming language theory, security protocol analysis, process algebras, and logics. Celf is an implementation of the CLF type theory that extends the LF type theory by linear types to support representation of state and a monad to support representation of concurrency. It relies on the judgments-as-types methodology for specification and the interpretation of CLF signatures as concurrent logic programs [LPPW05] for experimentation. Celf is written in Standard ML and compiles with MLton, MLKit, and SML/NJ. The source code and a collection of examples are available from http://www.twelf.org/\textbackslash{}textasciitildecelf.},
  address = {{Berlin, Heidelberg}},
  author = {{Schack-Nielsen}, Anders and Sch{\"u}rmann, Carsten},
  booktitle = {Automated {{Reasoning}}},
  editor = {Armando, Alessandro and Baumgartner, Peter and Dowek, Gilles},
  isbn = {978-3-540-71070-7},
  pages = {320--326},
  publisher = {{Springer Berlin Heidelberg}},
  title = {Celf \textendash{} {{A Logical Framework}} for {{Deductive}} and {{Concurrent Systems}} ({{System Description}})},
  year = {2008}
}

@inproceedings{Schack-Nielsen2008,
  __markedentry = {[uma:]},
  abstract = {CLF (Concurrent LF) [CPWW02a] is a logical framework for specifying and implementing deductive and concurrent systems from areas, such as programming language theory, security protocol analysis, process algebras, and logics. Celf is an implementation of the CLF type theory that extends the LF type theory by linear types to support representation of state and a monad to support representation of concurrency. It relies on the judgments-as-types methodology for specification and the interpretation of CLF signatures as concurrent logic programs [LPPW05] for experimentation. Celf is written in Standard ML and compiles with MLton, MLKit, and SML/NJ. The source code and a collection of examples are available from http://www.twelf.org/\textasciitilde{}celf.},
  author = {{Schack-Nielsen}, Anders and Sch{\"u}rmann, Carsten},
  booktitle = {Automated {{Reasoning}}},
  editor = {Armando, Alessandro and Baumgartner, Peter and Dowek, Gilles},
  isbn = {978-3-540-71070-7},
  pages = {320-326},
  publisher = {{Springer Berlin Heidelberg}},
  title = {Celf -- {{A Logical Framework}} for {{Deductive}} and {{Concurrent Systems}} ({{System Description}})},
  year = {2008}
}

@incollection{Sestoft2017,
  abstract = {This chapter introduces the approach taken and the plan followed in this book. We show how to represent arithmetic expressions and other program fragments as data structures in F\# as well as Java, and how to compute with such program fragments. We also introduce various basic concepts of programming languages.},
  address = {{Cham}},
  author = {Sestoft, Peter},
  booktitle = {Programming {{Language Concepts}}},
  doi = {10.1007/978-3-319-60789-4},
  isbn = {978-3-319-60789-4},
  pages = {1--12},
  publisher = {{Springer International Publishing}},
  title = {Programming {{Language Concepts}}},
  year = {2017}
}

@book{Sorensen2006,
  author = {S{\o}rensen, Morten Heine and Urzyczyn, Pawe\textbackslash{}l},
  publisher = {{Elsevier Science Limited}},
  title = {Lectures on the {{Curry}}-{{Howard Isomorphism}} ({{Studies}} in Logic and the Foundations of Mathematics, 0049-{{237X}}; v. 149)},
  year = {2006}
}

@techreport{Stansifer1984,
  author = {Stansifer, Ryan},
  institution = {{Cornell University}},
  title = {Presburger's Article on Integer Arithmetic: {{Remarks}} and Translation},
  year = {1984}
}

@inproceedings{Steele1994,
  author = {Steele, Guy L. and {Jr.}},
  booktitle = {In 21st {{Annual ACM Symposium}} on {{Principles}} of {{Programming Languages}} ({{POPL}}'94},
  pages = {472--492},
  publisher = {{ACM Press}},
  title = {Building {{Interpreters}} by {{Composing Monads}}},
  year = {1994}
}

@inproceedings{Takeuchi1994,
  abstract = {We present a small language \$\$\textbackslash{}backslashmathcal\{L\}\$\$and its typing system, starting from the idea of interaction, one of the important notions in parallel and distributed computing. \$\$\textbackslash{}backslashmathcal\{L\}\$\$is based on, apart from such constructs as parallel composition and process creation, three pairs of communication primitives which use the notion of a session, a semantically atomic chain of communication actions which can interleave with other such chains freely, for high-level abstraction of interactionbased computing. The three primitives enable programmers to elegantly describe complex interactions among processes with a rigorous type discipline similar to ML [4]. The language is given formal operational semantics and a type inference system, regarding which we prove that if a program is well-typed in the typing system, it never causes run-time error due to type inconsistent communication patterns, offering a new foundation for type discipline in parallel programming languages.},
  address = {{Berlin, Heidelberg}},
  author = {Takeuchi, Kaku and Honda, Kohei and Kubo, Makoto},
  booktitle = {{{PARLE}}'94 {{Parallel Architectures}} and {{Languages Europe}}},
  editor = {Halatsis, Costas and Maritsas, Dimitrios and Philokyprou, George and Theodoridis, Sergios},
  isbn = {978-3-540-48477-6},
  pages = {398--413},
  publisher = {{Springer Berlin Heidelberg}},
  title = {An Interaction-Based Language and Its Typing System},
  year = {1994}
}

@inproceedings{Takeuchi1994,
  abstract = {We present a small language \$\$\textbackslash{}mathcal\{L\}\$\$and its typing system, starting from the idea of interaction, one of the important notions in parallel and distributed computing. \$\$\textbackslash{}mathcal\{L\}\$\$is based on, apart from such constructs as parallel composition and process creation, three pairs of communication primitives which use the notion of a session, a semantically atomic chain of communication actions which can interleave with other such chains freely, for high-level abstraction of interactionbased computing. The three primitives enable programmers to elegantly describe complex interactions among processes with a rigorous type discipline similar to ML [4]. The language is given formal operational semantics and a type inference system, regarding which we prove that if a program is well-typed in the typing system, it never causes run-time error due to type inconsistent communication patterns, offering a new foundation for type discipline in parallel programming languages.},
  author = {Takeuchi, Kaku and Honda, Kohei and Kubo, Makoto},
  booktitle = {{{PARLE}}'94 {{Parallel Architectures}} and {{Languages Europe}}},
  editor = {Halatsis, Costas and Maritsas, Dimitrios and Philokyprou, George and Theodoridis, Sergios},
  isbn = {978-3-540-48477-6},
  pages = {398-413},
  publisher = {{Springer Berlin Heidelberg}},
  title = {An Interaction-Based Language and Its Typing System},
  year = {1994}
}

@inproceedings{Toninho2011,
  address = {{New York, NY, USA}},
  author = {Toninho, Bernardo and Caires, Lu{\'i}s and Pfenning, Frank},
  booktitle = {Proceedings of the 13th {{International ACM SIGPLAN Symposium}} on {{Principles}} and {{Practices}} of {{Declarative Programming}}},
  doi = {10.1145/2003476.2003499},
  isbn = {978-1-4503-0776-5},
  keywords = {process calculus,type theory},
  pages = {161--172},
  publisher = {{ACM}},
  series = {{{PPDP}} '11},
  title = {Dependent {{Session Types}} via {{Intuitionistic Linear Type Theory}}},
  year = {2011}
}

@inproceedings{vanderWalt2012,
  author = {{van der Walt}, Paul and Swierstra, Wouter},
  booktitle = {Symposium on {{Implementation}} and {{Application}} of {{Functional Languages}}},
  pages = {157--173},
  publisher = {{Springer}},
  title = {Engineering Proof by Reflection in {{Agda}}},
  year = {2012}
}

@phdthesis{vanderWalt2012a,
  author = {{van der Walt}, PD},
  title = {Reflection in {{Agda}}},
  type = {Master's {{Thesis}}},
  year = {2012}
}

@incollection{Vasconcelos2009,
  author = {Vasconcelos, Vasco},
  booktitle = {Information and {{Computation}}},
  doi = {10.1007/978-3-642-01918-0_4},
  file = {/home/uma/references/papers/fundamentals-of-session-types.pdf},
  month = may,
  pages = {158-186},
  title = {Fundamentals of {{Session Types}}},
  volume = {217},
  year = {2009}
}

@incollection{Vasconcelos2009,
  author = {Vasconcelos, Vasco},
  booktitle = {Information and {{Computation}}},
  doi = {10.1007/978-3-642-01918-0_4},
  month = may,
  pages = {158-186},
  title = {Fundamentals of {{Session Types}}},
  volume = {217},
  year = {2009}
}

@book{Wadler1989,
  abstract = {From the type of a polymorphic function we can derive a theorem that it satisfies. Every function of the same type satisfies the same theorem. This provides a free source of useful theorems, courtesy of Reynolds\&\#039; abstraction theorem for the polymorphic lambda calculus.},
  author = {Wadler, Philip},
  title = {Theorems for Free!},
  year = {1989}
}

@article{Wadler2003,
  author = {Wadler, Philip},
  doi = {10.1007/3-540-57182-5_12},
  file = {/home/uma/references/papers/a-taste-of-linear-logic.pdf},
  month = nov,
  title = {A {{Taste}} of {{Linear Logic}}},
  year = {2003}
}

@article{Wadler2014,
  author = {Wadler, Philip},
  doi = {10.1017/S095679681400001X},
  file = {/home/uma/references/papers/propositions-as-sessions.pdf},
  journal = {Journal of Functional Programming},
  number = {2-3},
  pages = {384--418},
  title = {Propositions as Sessions},
  volume = {24},
  year = {2014}
}

@article{Wadler2014,
  __markedentry = {[uma:6]},
  author = {Wadler, Philip},
  doi = {10.1017/S095679681400001X},
  journal = {Journal of Functional Programming},
  number = {2-3},
  pages = {384--418},
  publisher = {{Cambridge University Press}},
  title = {Propositions as Sessions},
  volume = {24},
  year = {2014}
}

@book{Walker1989,
  author = {Walker, David and Milner, Robin and Parrow, Joachim},
  file = {/home/uma/references/papers/a-calculus-of-mobile-processes.pdf},
  month = jun,
  title = {A {{Calculus}} of {{Mobile Processes}} ({{Parts I}} and {{II}})},
  volume = {100},
  year = {1989}
}

@book{Walker1989,
  __markedentry = {[uma:6]},
  author = {Walker, David and Milner, Robin and Parrow, Joachim},
  month = jun,
  title = {A {{Calculus}} of {{Mobile Processes}} ({{Parts I}} and {{II}})},
  volume = {100},
  year = {1989}
}

@unpublished{Wing2002,
  author = {Wing, Jeannette M.},
  file = {/home/uma/references/papers/faq-pi-calculus.pdf},
  month = dec,
  title = {{{FAQ}} on {{Pi}}-{{Calculus}}},
  year = {2002}
}

@unpublished{Wing2002,
  author = {Wing, Jeannette M.},
  month = dec,
  title = {{{FAQ}} on {{Pi}}-{{Calculus}}},
  year = {2002}
}

@article{Xi2017,
  author = {Xi, Hongwei},
  month = mar,
  title = {Applied {{Type System}}: {{An Approach}} to {{Practical Programming}} with {{Theorem}}-{{Proving}}},
  year = {2017}
}

@article{Xi2017,
  __markedentry = {[uma:]},
  author = {Xi, Hongwei},
  month = mar,
  title = {Applied {{Type System}}: {{An Approach}} to {{Practical Programming}} with {{Theorem}}-{{Proving}}},
  year = {2017}
}

@inproceedings{Yoshida2008,
  author = {{Dezani-Ciancaglini}, Mariangiola and {de'Liguoro}, Ugo and Yoshida, Nobuko},
  booktitle = {Trustworthy {{Global Computing}}},
  editor = {Barthe, Gilles and Fournet, C{\'e}dric},
  isbn = {978-3-540-78663-4},
  pages = {257-275},
  publisher = {{Springer Berlin Heidelberg}},
  title = {On {{Progress}} for {{Structured Communications}}},
  year = {2008}
}


