% Encoding: UTF-8

@InCollection{Dardha2016m,
  author    = {Dardha, Ornela},
  title     = {Session Types Revisited},
  booktitle = {Type Systems for Distributed Programs: Components and Sessions},
  publisher = {Springer},
  year      = {2016},
  month     = jan,
  isbn      = {978-94-6239-203-8},
  abstract  = {In this chapter we introduce the encoding of session types into linear channel types and variant types and of session processes into standard $$\pi $$Ï€-calculus processes.},
  date      = {2016-01-01},
  doi       = {10.2991/978-94-6239-204-5_6},
  url       = {http://dx.doi.org/10.2991/978-94-6239-204-5_6},
}

@MastersThesis{Dilmore2019,
  author = {Eric Dilmore},
  title  = {Pi-Calculus Session Types in Coq},
  school = {School of Computing Science, University of Glasgow},
  year   = {2019},
}

@InProceedings{Chlipala2008,
  author  = {Chlipala, Adam},
  title   = {Parametric Higher-Order Abstract Syntax for Mechanized Semantics},
  year    = {2008},
  volume  = {43},
  pages   = {143-156},
  month   = {09},
  doi     = {10.1145/1411204.1411226},
  journal = {ACM SIGPLAN Notices},
}

@InBook{Vasconcelos2009,
  pages   = {158-186},
  title   = {Fundamentals of Session Types},
  year    = {2009},
  author  = {Vasconcelos, Vasco},
  volume  = {217},
  month   = {05},
  doi     = {10.1007/978-3-642-01918-0_4},
  journal = {Information and Computation},
}

@Misc{Wadler1989,
  author   = {Wadler, Philip},
  title    = {Theorems for free!},
  year     = {1989},
  abstract = {From the type of a polymorphic function we can derive a theorem that it satisfies. Every function of the same type satisfies the same theorem. This provides a free source of useful theorems, courtesy of Reynolds&#039; abstraction theorem for the polymorphic lambda calculus.},
}

@InProceedings{Vasconcelos2010,
  author    = {Giunti, Marco and Vasconcelos, Vasco T.},
  title     = {A Linear Account of Session Types in the Pi Calculus},
  booktitle = {CONCUR 2010 - Concurrency Theory},
  year      = {2010},
  editor    = {Gastin, Paul and Laroussinie, Fran{\c{c}}ois},
  pages     = {432--446},
  address   = {Berlin, Heidelberg},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {We present a reconstruction of session types in a conventional pi calculus where types are qualified as linear or unrestricted. Linearly typed communication channels are guaranteed to occur in exactly one thread, possibly multiple times. We equip types with a constructor that denotes the two ends of a same communication channel. In order to assess the flexibility of the new type system, we provide three distinct encodings (from the linear lambda calculus, from the linear pi calculus, and from the pi calculus with polarized variables) into our system. For each language we present operational and typing correspondences, showing that our system effectively subsumes the linear pi calculus as well as foregoing works on session types.},
  isbn      = {978-3-642-15375-4},
}

@Article{Kobayashi1999,
  author  = {Kobayashi, Naoki and Pierce, Benjamin and N. Turner, David},
  title   = {Linearity and the Pi-Calculus},
  journal = {ACM Transactions on Programming Languages and Systems (TOPLAS)},
  year    = {1999},
  volume  = {21},
  pages   = {914-947},
  month   = {12},
  doi     = {10.1145/330249.330251},
}

@inproceedings{Toninho2011,
 author = {Toninho, Bernardo and Caires, Lu\'{\i}s and Pfenning, Frank},
 title = {Dependent Session Types via Intuitionistic Linear Type Theory},
 booktitle = {Proceedings of the 13th International ACM SIGPLAN Symposium on Principles and Practices of Declarative Programming},
 series = {PPDP '11},
 year = {2011},
 isbn = {978-1-4503-0776-5},
 location = {Odense, Denmark},
 pages = {161--172},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/2003476.2003499},
 doi = {10.1145/2003476.2003499},
 acmid = {2003499},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {process calculus, type theory},
} 

@article{Dreyer2018,
 author = {Jung, Ralf and Jourdan, Jacques-Henri and Krebbers, Robbert and Dreyer, Derek},
 title = {RustBelt: Securing the Foundations of the Rust Programming Language},
 journal = {Proc. ACM Program. Lang.},
 issue_date = {January 2018},
 volume = {2},
 number = {POPL},
 month = dec,
 year = {2017},
 issn = {2475-1421},
 pages = {66:1--66:34},
 articleno = {66},
 numpages = {34},
 url = {http://doi.acm.org/10.1145/3158154},
 doi = {10.1145/3158154},
 acmid = {3158154},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Rust, concurrency, logical relations, separation logic, type systems},
} 

@article{Krishnaswami2015,
author = {R. Krishnaswami, Neelakantan and Pradic, Pierre and Benton, Nick},
year = {2015},
month = {01},
pages = {17-30},
title = {Integrating dependent and linear types},
volume = {2015},
journal = {Conference Record of the Annual ACM Symposium on Principles of Programming Languages},
doi = {10.1145/2676726.2676969}
}

@article{Gay2008,
  author = {Gay, Simon},
  year = {2008},
  month = {10},
  pages = {895-930},
  title = {Bounded polymorphism in session types},
  volume = {18},
  journal = {Mathematical Structures in Computer Science},
  doi = {10.1017/S0960129508006944}
}

@InProceedings{Yoshida2008,
  author="Dezani-Ciancaglini, Mariangiola and de'Liguoro, Ugo and Yoshida, Nobuko",
  editor="Barthe, Gilles and Fournet, C{\'e}dric",
  title="On Progress for Structured Communications",
  booktitle="Trustworthy Global Computing",
  year="2008",
  publisher="Springer Berlin Heidelberg",
  address="Berlin, Heidelberg",
  pages="257--275",
  isbn="978-3-540-78663-4"
}

@Article{McBride2000,
  author    = {McBride, Conor},
  title     = {Dependently typed functional programs and their proofs},
  year      = {2000},
  publisher = {University of Edinburgh. College of Science and Engineering. School of Informatics.},
}

@Article{Oury2008,
  author    = {Oury, Nicolas and Swierstra, Wouter},
  title     = {The power of Pi},
  journal   = {ACM Sigplan Notices},
  year      = {2008},
  volume    = {43},
  number    = {9},
  pages     = {39--50},
  publisher = {ACM},
}

@InProceedings{Casinghino2014,
  author       = {Casinghino, Chris and Sj{\"o}berg, Vilhelm and Weirich, Stephanie},
  title        = {Combining proofs and programs in a dependently typed language},
  booktitle    = {ACM SIGPLAN Notices},
  year         = {2014},
  volume       = {49},
  number       = {1},
  pages        = {33--45},
  organization = {ACM},
}

@InProceedings{VanDerWalt2012,
  author       = {van der Walt, Paul and Swierstra, Wouter},
  title        = {Engineering proof by reflection in Agda},
  booktitle    = {Symposium on Implementation and Application of Functional Languages},
  year         = {2012},
  pages        = {157--173},
  organization = {Springer},
}

@InProceedings{Boutin1997,
  author       = {Boutin, Samuel},
  title        = {Using reflection to build efficient and certified decision procedures},
  booktitle    = {International Symposium on Theoretical Aspects of Computer Software},
  year         = {1997},
  pages        = {515--529},
  organization = {Springer},
}

@InProceedings{Gregoire2005,
  author       = {Gr{\'e}goire, Benjamin and Mahboubi, Assia},
  title        = {Proving equalities in a commutative ring done right in Coq},
  booktitle    = {International Conference on Theorem Proving in Higher Order Logics},
  year         = {2005},
  pages        = {98--113},
  organization = {Springer},
}

@InProceedings{Norrish2003,
  author       = {Norrish, Michael},
  title        = {Complete integer decision procedures as derived rules in HOL},
  booktitle    = {International Conference on Theorem Proving in Higher Order Logics},
  year         = {2003},
  pages        = {71--86},
  organization = {Springer},
}

@InProceedings{Pugh1991,
  author       = {Pugh, William},
  title        = {The Omega test: a fast and practical integer programming algorithm for dependence analysis},
  booktitle    = {Proceedings of the 1991 ACM/IEEE conference on Supercomputing},
  year         = {1991},
  pages        = {4--13},
  organization = {ACM},
}

@Article{Cooper1972,
  author  = {Cooper, David C},
  title   = {Theorem proving in arithmetic without multiplication},
  journal = {Machine intelligence},
  year    = {1972},
  volume  = {7},
  number  = {91-99},
  pages   = {300},
}

@InProceedings{Bruijn1972,
  author       = {de Bruijn, Nicolaas Govert},
  title        = {Lambda calculus notation with nameless dummies, a tool for automatic formula manipulation, with application to the Church-Rosser theorem},
  booktitle    = {Indagationes Mathematicae (Proceedings)},
  year         = {1972},
  volume       = {75},
  number       = {5},
  pages        = {381--392},
  organization = {Elsevier},
}

@InProceedings{Norell2009,
  author    = {Ulf Norell and James Chapman},
  title     = {Dependently Typed Programming in Agda},
  booktitle = {Advanced Functional Programming. LNCS 5832},
  year      = {2009},
  pages     = {230--266},
  publisher = {Springer},
}

@Article{McBride2004,
  author    = {McBride, Conor and McKinna, James},
  title     = {The view from the left},
  journal   = {Journal of functional programming},
  year      = {2004},
  volume    = {14},
  number    = {1},
  pages     = {69--111},
  publisher = {Cambridge University Press},
}

@Misc{Howard1980a,
  author    = {Howard, William A},
  title     = {The formulae-as-types notion of construction. Hindley, JR, \& Seldin, JP (eds), To HB Curry: Essays on combinatory logic, lambda calculus and formalism},
  year      = {1980},
  publisher = {Academic Press},
}

@Article{Curry1934,
  author    = {Curry, Haskell B},
  title     = {Functionality in combinatory logic},
  journal   = {Proceedings of the National Academy of Sciences},
  year      = {1934},
  volume    = {20},
  number    = {11},
  pages     = {584--590},
  publisher = {National Acad Sciences},
}

@MastersThesis{Walt2012,
  author = {van der Walt, PD},
  title  = {Reflection in Agda},
  year   = {2012},
}

@InProceedings{Bove2009,
  author       = {Bove, Ana and Dybjer, Peter and Norell, Ulf},
  title        = {{A brief overview of Agda -- a functional language with dependent types}},
  booktitle    = {International Conference on Theorem Proving in Higher Order Logics},
  year         = {2009},
  pages        = {73--78},
  organization = {Springer},
}

@InProceedings{Kokke2015,
  author       = {Kokke, Pepijn and Swierstra, Wouter},
  title        = {Auto in Agda},
  booktitle    = {International Conference on Mathematics of Program Construction},
  year         = {2015},
  pages        = {276--301},
  organization = {Springer},
}

@InProceedings{Presburger1929,
  author    = {Presburger, Mojzesz},
  title     = {Uber die Vollstandigkeiteines gewissen Systems der Arithmetik ganzer Zahlen, in welchen die Addition als einzige Operation hervortritt},
  booktitle = {Comptes-Rendus du ler Congres des Mathematiciens des Pays Slavs},
  year      = {1929},
}

@TechReport{Stansifer1984,
  author      = {Stansifer, Ryan},
  title       = {Presburger's article on integer arithmetic: Remarks and translation},
  institution = {Cornell University},
  year        = {1984},
}

@Misc{Norrish2006,
  author       = {Michael Norrish},
  title        = {Deciding Presburger Arithmetic},
  howpublished = {\url{http://ssll.cecs.anu.edu.au/files/slides/norrish.pdf}},
  year         = {2006},
  url          = {http://ssll.cecs.anu.edu.au/files/slides/norrish.pdf},
}

@TechReport{Fischer1974,
  author      = {Fischer, Michael J and Rabin, Michael O},
  title       = {Super-Exponential Complexity of Presburger Arithmetic.},
  institution = {Massachusetts Inst of Tech Cambridge Project MAC},
  year        = {1974},
}

@TechReport{Chaieb2003,
  author      = {Chaieb, Amine and Nipkow, Tobias},
  title       = {Generic proof synthesis for Presburger arithmetic},
  institution = {Technical report, Technische Universit{\"a}t M{\"u}nchen},
  year        = {2003},
}

@Book{Sorensen2006d,
  title     = {Lectures on the Curry-Howard Isomorphism (Studies in logic and the foundations of mathematics, 0049-237X; v. 149)},
  publisher = {Elsevier Science Limited},
  year      = {2006},
  author    = {S{\o}rensen, Morten Heine and Urzyczyn, Pawe{\l}},
}

@Book{Janicic1997a,
  title     = {A comparison of decision procedures in Presburger arithmetic},
  publisher = {University of Edinburgh, Department of Artificial Intelligence},
  year      = {1997},
  author    = {Jani{\v{c}}i{\'c}, Predrag and Green, Ian and Bundy, Alan},
}

@Misc{Russinoff2017,
  author       = {Russinoff, David M},
  title        = {Polynomial Terms and Sparse Horner Normal Form},
  howpublished = {\url{http://www.russinoff.com/papers/shnf.pdf}},
  year         = {2017},
  url          = {http://www.russinoff.com/papers/shnf.pdf},
}

@book{Aho:1986:CPT:6448,
 author = {Aho, Alfred V. and Sethi, Ravi and Ullman, Jeffrey D.},
 title = {Compilers: Principles, Techniques, and Tools},
 year = {1986},
 isbn = {0-201-10088-6},
 publisher = {Addison-Wesley Longman Publishing Co., Inc.},
 address = {Boston, MA, USA},
}

@article{Martin:2000:DPDP,
    title = {Design Principles and Design Patterns},
    author = {Martin, Robert Cecil},
    journal = {Object Mentor},
    volume = {1},
    number = {34},
    pages = {597},
    year = {2000}
}

@Book{Pierce2002,
  title     = {Types and programming languages},
  publisher = {{MIT} Press},
  year      = {2002},
  author    = {Benjamin C. Pierce},
  isbn      = {978-0-262-16209-8},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/bib/books/daglib/0005958},
}

@inproceedings{Hope,
  author = {Burstall, R. M. and MacQueen, D. B. and Sannella, D. T.},
  title = {HOPE: An Experimental Applicative Language},
  booktitle = {Proceedings of the 1980 ACM Conference on LISP and Functional Programming},
  series = {LFP '80},
  year = {1980},
  location = {Stanford University, California, USA},
  pages = {136--143},
  numpages = {8},
  url = {http://doi.acm.org/10.1145/800087.802799},
  doi = {10.1145/800087.802799},
  acmid = {802799},
  publisher = {ACM},
  address = {New York, NY, USA},
}

@InProceedings{Ford2004,
  author    = {Bryan Ford},
  title     = {Parsing expression grammars: a recognition-based syntactic foundation},
  booktitle = {Proceedings of the 31st {ACM} {SIGPLAN-SIGACT} Symposium on Principles of Programming Languages, {POPL} 2004, Venice, Italy, January 14-16, 2004},
  year      = {2004},
  editor    = {Neil D. Jones and Xavier Leroy},
  pages     = {111--122},
  publisher = {{ACM}},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl    = {https://dblp.org/rec/bib/conf/popl/Ford04},
  doi       = {10.1145/964001.964011},
}

@Inbook{Sestoft2017,
	author="Sestoft, Peter",
	title="Introduction",
	bookTitle="Programming Language Concepts",
	year="2017",
	publisher="Springer International Publishing",
	address="Cham",
	pages="1--12",
	abstract="This chapter introduces the approach taken and the plan followed in this book. We show how to represent arithmetic expressions and other program fragments as data structures in F{\#} as well as Java, and how to compute with such program fragments. We also introduce various basic concepts of programming languages.",
	isbn="978-3-319-60789-4",
	doi="10.1007/978-3-319-60789-4_1",
	url="https://doi.org/10.1007/978-3-319-60789-4_1"
}

@inproceedings{Steele94buildinginterpreters,
    author = {Guy L. Steele and Jr.},
    title = {Building Interpreters by Composing Monads},
    booktitle = {In 21st Annual ACM Symposium on Principles of Programming Languages (POPL'94},
    year = {1994},
    pages = {472--492},
    publisher = {ACM Press}
    }

@article{Backus,
 author = {Backus, J. W. and Bauer, F. L. and Green, J. and Katz, C. and McCarthy, J. and Perlis, A. J. and Rutishauser, H. and Samelson, K. and Vauquois, B. and Wegstein, J. H. and van Wijngaarden, A. and Woodger, M.},
 editor = {Naur, Peter},
 title = {Report on the Algorithmic Language {ALGOL} 60},
 journal = {Commun. ACM},
 issue_date = {May 1960},
 volume = {3},
 number = {5},
 month = may,
 year = {1960},
 issn = {0001-0782},
 pages = {299--314},
 numpages = {16},
 url = {http://doi.acm.org/10.1145/367236.367262},
 doi = {10.1145/367236.367262},
 acmid = {367262},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@Article{Bock2016,
  author  = {Peter Brottveit Bock and Alessandro Bruni and Agata Murawska and Carsten SchÃ¼rmann},
  title   = {Representing Session Types},
  journal = {Dale Millerâ€™s Festschrift},
  year    = {2016},
}

@InProceedings{Dezani-ciancaglini2010,
  author = {Dezani-ciancaglini, Mariangiola and De'Liguoro, Ugo},
  title  = {Sessions and Session Types: An Overview},
  year   = {2010},
  pages  = {1-28},
  month  = {08},
  doi    = {10.1007/978-3-642-14458-5_1},
}

@Article{Paykin2017,
  author  = {Paykin, Jennifer and Zdancewic, S},
  title   = {The linearity Monad},
  journal = {ACM SIGPLAN Notices},
  year    = {2017},
  volume  = {52},
  pages   = {117-132},
  month   = {09},
  doi     = {10.1145/3156695.3122965},
}

@Article{SIMONJ.2008,
  author    = {GAY, SIMON J.},
  title     = {Bounded polymorphism in session types},
  journal   = {Mathematical Structures in Computer Science},
  year      = {2008},
  volume    = {18},
  number    = {5},
  pages     = {895â€“930},
  doi       = {10.1017/S0960129508006944},
  publisher = {Cambridge University Press},
}

@Article{Kobayashi2002,
  author  = {Kobayashi, Naoki},
  title   = {A Type System for Lock-Free Processes},
  journal = {Information and Computation},
  year    = {2002},
  volume  = {177},
  pages   = {122-159},
  month   = {09},
  doi     = {10.1006/inco.2002.3171},
}

@InProceedings{Mostrous2009,
  author = {Mostrous, Dimitris and Yoshida, Nobuko and Honda, Kohei},
  title  = {Global Principal Typing in Partially Commutative Asynchronous Sessions},
  year   = {2009},
  pages  = {316-332},
  month  = {08},
  doi    = {10.1007/978-3-642-00590-9_23},
}

@InProceedings{Takeuchi1994,
  author    = {Takeuchi, Kaku and Honda, Kohei and Kubo, Makoto},
  title     = {An interaction-based language and its typing system},
  booktitle = {PARLE'94 Parallel Architectures and Languages Europe},
  year      = {1994},
  editor    = {Halatsis, Costas and Maritsas, Dimitrios and Philokyprou, George and Theodoridis, Sergios},
  pages     = {398--413},
  address   = {Berlin, Heidelberg},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {We present a small language {\$}{\$}{\backslash}mathcal{\{}L{\}}{\$}{\$}and its typing system, starting from the idea of interaction, one of the important notions in parallel and distributed computing. {\$}{\$}{\backslash}mathcal{\{}L{\}}{\$}{\$}is based on, apart from such constructs as parallel composition and process creation, three pairs of communication primitives which use the notion of a session, a semantically atomic chain of communication actions which can interleave with other such chains freely, for high-level abstraction of interactionbased computing. The three primitives enable programmers to elegantly describe complex interactions among processes with a rigorous type discipline similar to ML [4]. The language is given formal operational semantics and a type inference system, regarding which we prove that if a program is well-typed in the typing system, it never causes run-time error due to type inconsistent communication patterns, offering a new foundation for type discipline in parallel programming languages.},
  isbn      = {978-3-540-48477-6},
}

@InProceedings{Schack-Nielsen2008,
  author    = {Schack-Nielsen, Anders and Sch{\"u}rmann, Carsten},
  title     = {Celf -- A Logical Framework for Deductive and Concurrent Systems (System Description)},
  booktitle = {Automated Reasoning},
  year      = {2008},
  editor    = {Armando, Alessandro and Baumgartner, Peter and Dowek, Gilles},
  pages     = {320--326},
  address   = {Berlin, Heidelberg},
  publisher = {Springer Berlin Heidelberg},
  abstract  = {CLF (Concurrent LF) [CPWW02a] is a logical framework for specifying and implementing deductive and concurrent systems from areas, such as programming language theory, security protocol analysis, process algebras, and logics. Celf is an implementation of the CLF type theory that extends the LF type theory by linear types to support representation of state and a monad to support representation of concurrency. It relies on the judgments-as-types methodology for specification and the interpretation of CLF signatures as concurrent logic programs [LPPW05] for experimentation. Celf is written in Standard ML and compiles with MLton, MLKit, and SML/NJ. The source code and a collection of examples are available from http://www.twelf.org/{\textasciitilde}celf.},
  isbn      = {978-3-540-71070-7},
}

@Article{Xi2017,
  author = {Xi, Hongwei},
  title  = {Applied Type System: An Approach to Practical Programming with Theorem-Proving},
  year   = {2017},
  month  = {03},
}

@InBook{McBride2016,
  pages         = {207--233},
  title         = {I Got Plenty o' Nuttin'},
  publisher     = {Springer International Publishing},
  year          = {2016},
  author        = {McBride, Conor},
  editor        = {Lindley, Sam and McBride, Conor and Trinder, Phil and Sannella, Don},
  address       = {Cham},
  isbn          = {978-3-319-30936-1},
  __markedentry = {[uma:]},
  abstract      = {Work to date on combining linear types and dependent types has deliberately and successfully avoided doing so. Entirely fit for their own purposes, such systems wisely insist that types depend only on the replicable sublanguage, thus sidestepping the issue of counting uses of limited-use data either within types or in ways which are only really needed to shut the typechecker up. As a result, the linear implication (`lollipop') stubbornly remains a non-dependent {\$}{\$}S {\backslash}multimap T{\$}{\$}SâŠ¸T. This paper defines and establishes the basic metatheory of a type theory supporting a `dependent lollipop' {\$}{\$}(x{\backslash}!:{\backslash}!S){\backslash}multimap T[x]{\$}{\$}(x:S)âŠ¸T[x], where what the input used to be is in some way commemorated by the type of the output. For example, we might convert list to length-indexed vectors in place by a function with type {\$}{\$}(l{\backslash}!:{\backslash}!{\backslash}mathsf {\{}List{\}}{\backslash},X){\backslash}multimap {\backslash}mathsf {\{}Vector{\}}{\backslash},X{\backslash},({\backslash}mathsf {\{}length{\}}{\backslash},l){\$}{\$}(l:ListX)âŠ¸VectorX(lengthl). Usage is tracked with resource annotations belonging to an arbitrary rig, or `riNg without Negation'. The key insight is to use the rig's zero to mark information in contexts which is present for purposes of contemplation rather than consumption, like a meal we remember fondly but cannot eat twice. We need no runtime copies of l to form the above vector type. We can have plenty of nothing with no additional runtime resource, and nothing is plenty for the construction of dependent types.},
  booktitle     = {A List of Successes That Can Change the World: Essays Dedicated to Philip Wadler on the Occasion of His 60th Birthday},
  doi           = {10.1007/978-3-319-30936-1_12},
  url           = {https://doi.org/10.1007/978-3-319-30936-1_12},
}

@InProceedings{Caires2010,
  author        = {Caires, Lu{\'i}s and Pfenning, Frank},
  title         = {Session Types as Intuitionistic Linear Propositions},
  booktitle     = {CONCUR 2010 - Concurrency Theory},
  year          = {2010},
  editor        = {Gastin, Paul and Laroussinie, Fran{\c{c}}ois},
  pages         = {222--236},
  address       = {Berlin, Heidelberg},
  publisher     = {Springer Berlin Heidelberg},
  __markedentry = {[uma:6]},
  abstract      = {Several type disciplines for $\pi$-calculi have been proposed in which linearity plays a key role, even if their precise relationship with pure linear logic is still not well understood. In this paper, we introduce a type system for the $\pi$-calculus that exactly corresponds to the standard sequent calculus proof system for dual intuitionistic linear logic. Our type system is based on a new interpretation of linear propositions as session types, and provides the first purely logical account of all (both shared and linear) features of session types. We show that our type discipline is useful from a programming perspective, and ensures session fidelity, absence of deadlocks, and a tight operational correspondence between $\pi$-calculus reductions and cut elimination steps.},
  isbn          = {978-3-642-15375-4},
}

@Article{Gay2005,
  author        = {Gay, Simon and Hole, Malcolm},
  title         = {Subtyping for session types in the pi calculus},
  journal       = {Acta Informatica},
  year          = {2005},
  volume        = {42},
  number        = {2},
  pages         = {191--225},
  month         = {Nov},
  issn          = {1432-0525},
  __markedentry = {[uma:6]},
  abstract      = {Extending the pi calculus with the session types proposed by Honda et al. allows high-level specifications of structured patterns of communication, such as client-server protocols, to be expressed as types and verified by static typechecking. We define a notion of subtyping for session types, which allows protocol specifications to be extended in order to describe richer behaviour; for example, an implemented server can be refined without invalidating type-correctness of an overall system. We formalize the syntax, operational semantics and typing rules of an extended pi calculus, prove that typability guarantees absence of run-time communication errors, and show that the typing rules can be transformed into a practical typechecking algorithm.},
  day           = {01},
  doi           = {10.1007/s00236-005-0177-z},
  url           = {https://doi.org/10.1007/s00236-005-0177-z},
}

@InProceedings{Sadrzadeh03modallinear,
  author    = {Mehrnoosh Sadrzadeh},
  title     = {Modal linear logic in higher order logic: An experiment with Coq},
  booktitle = {In Emerging Trends TPHOLS â€™03},
  year      = {2003},
  pages     = {75--93},
  file      = {:papers/modal-linear-logic-in-higher-order-logic.pdf:PDF},
  keywords  = {rank3},
}

@Comment{jabref-meta: databaseType:bibtex;}
